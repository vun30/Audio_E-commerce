package org.example.audio_ecommerce.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.OneToMany;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import jakarta.persistence.*;
import lombok.*;
import org.example.audio_ecommerce.entity.Enum.StoreStatus;
import org.example.audio_ecommerce.entity.Enum.VoucherStatus;
import org.example.audio_ecommerce.entity.Enum.VoucherType;
import org.hibernate.annotations.GenericGenerator;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Entity
@Table(name = "shop_vouchers")
public class ShopVoucher {

    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private UUID id;

    // ========== üîπ Quan h·ªá ==========
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "shop_id", nullable = false)
    private Store shop; // C·ª≠a h√†ng s·ªü h·ªØu voucher

    @OneToMany(mappedBy = "voucher", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<ShopVoucherProduct> voucherProducts = new ArrayList<>();

    // ========== üîπ Th√¥ng tin c∆° b·∫£n ==========
    @Column(nullable = false, unique = true, length = 100)
    private String code;  // M√£ voucher (VD: SALE10K)

    @Column(nullable = false, length = 255)
    private String title; // Ti√™u ƒë·ªÅ hi·ªÉn th·ªã

    @Column(length = 500)
    private String description; // M√¥ t·∫£ chi ti·∫øt

    // ========== üîπ C·∫•u h√¨nh gi·∫£m gi√° ==========
    @Enumerated(EnumType.STRING)
    private VoucherType type; // FIXED / PERCENT / SHIPPING

    private BigDecimal discountValue; // N·∫øu FIXED: gi·∫£m ti·ªÅn
    private Integer discountPercent;  // N·∫øu PERCENT: gi·∫£m %
    private BigDecimal maxDiscountValue; // Gi·∫£m t·ªëi ƒëa khi theo %
    private BigDecimal minOrderValue; // ƒê∆°n t·ªëi thi·ªÉu

    // ========== üîπ Ph√°t h√†nh & H·∫°n m·ª©c ==========
    private Integer totalVoucherIssued;   // S·ªë l∆∞·ª£ng voucher ph√°t h√†nh
    private Integer totalUsageLimit;      // T·ªïng l∆∞·ª£t d√πng
    private Integer usagePerUser;         // M·ªói KH d√πng t·ªëi ƒëa
    private Integer remainingUsage;       // S·ªë l∆∞·ª£t c√≤n l·∫°i

    // ========== üîπ Th·ªùi gian & tr·∫°ng th√°i ==========
    private LocalDateTime startTime;
    private LocalDateTime endTime;

    @Enumerated(EnumType.STRING)
    private VoucherStatus status; // DRAFT, ACTIVE, EXPIRED, DISABLED

     private LocalDateTime createdAt; // üìù V√≠ d·ª•: 2025-01-15T10:30:00
    private LocalDateTime updatedAt; // üìù V√≠ d·ª•: 2025-01-16T14:22:00
    private LocalDateTime lastUpdatedAt;    // th·ªùi ƒëi·ªÉm update g·∫ßn nh·∫•t tr∆∞·ªõc ƒë√≥
    private Long lastUpdateIntervalDays;    // s·ªë ng√†y c√°ch l·∫ßn c·∫≠p nh·∫≠t tr∆∞·ªõc
    private UUID createdBy; // üìù V√≠ d·ª•: UUID("user-admin-123")
    private UUID updatedBy; // üìù V√≠ d·ª•: UUID("user-seller-456")

    // ============= G√°n th·ªùi ƒëi·ªÉm khi t·∫°o m·ªõi =============
    @PrePersist
    public void onCreate() {
        LocalDateTime now = LocalDateTime.now();
        this.createdAt = now;
        this.updatedAt = now;
        this.lastUpdatedAt = now;          // xem nh∆∞ update g·∫ßn nh·∫•t l√† khi t·∫°o
        this.lastUpdateIntervalDays = 0L;  // l·∫ßn ƒë·∫ßu t·∫°o => 0 ng√†y
    }

    // ============= T·ª± t√≠nh s·ªë ng√†y m·ªói khi update =============
    @PreUpdate
    public void onUpdate() {
        LocalDateTime now = LocalDateTime.now();

        // n·∫øu ch∆∞a c√≥ lastUpdatedAt th√¨ d√πng createdAt l√†m m·ªëc
        if (this.lastUpdatedAt == null) {
            this.lastUpdatedAt = this.createdAt;
        }

        // t√≠nh s·ªë ng√†y gi·ªØa l·∫ßn update tr∆∞·ªõc v√† hi·ªán t·∫°i
        this.lastUpdateIntervalDays =
                ChronoUnit.DAYS.between(this.lastUpdatedAt, now);

        // c·∫≠p nh·∫≠t l·∫°i m·ªëc th·ªùi gian
        this.lastUpdatedAt = this.updatedAt != null ? this.updatedAt : this.createdAt;
        this.updatedAt = now;
    }
}
