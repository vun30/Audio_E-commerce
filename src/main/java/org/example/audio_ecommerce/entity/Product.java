package org.example.audio_ecommerce.entity;

import org.example.audio_ecommerce.entity.Enum.Category;
import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.*;
import org.example.audio_ecommerce.entity.Enum.ProductStatus;
import org.hibernate.annotations.GenericGenerator;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Entity
@Table(name = "products")
public class Product {

    @Id
    @GeneratedValue(generator = "uuid2")
    @GenericGenerator(name = "uuid2", strategy = "uuid2")
    @Column(name = "product_id", columnDefinition = "CHAR(36)")
    private UUID productId;

    // ======================
    // üîó QUAN H·ªÜ
    // ======================
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "store_id", nullable = false)
    @JsonIgnore
    private Store store;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "category_id", nullable = false)
    private Category category;

    @Column(name = "brand_id", columnDefinition = "CHAR(36)", nullable = false)
    private UUID brandId;

    // ======================
    // üîñ TH√îNG TIN C∆† B·∫¢N
    // ======================
    private String name;
    @Column(unique = true)
    private String slug;
    private String shortDescription;
    @Lob
    private String description;
    private String model;
    private String color;
    private String material;
    private String dimensions;
    private BigDecimal weight;

    // ======================
    // üì∏ MEDIA
    // ======================
    @ElementCollection
    @CollectionTable(name = "product_images", joinColumns = @JoinColumn(name = "product_id"))
    @Column(name = "image_url")
    private List<String> images;
    private String videoUrl;

    // ======================
    // üíµ GI√Å & KHO
    // ======================
    @Column(unique = true, nullable = false)
    private String sku;
    private BigDecimal price;
    private BigDecimal discountPrice;
    private String currency;
    private Integer stockQuantity;
    private String warehouseLocation;
    @Column(length = 500)
    private String shippingAddress;

    // ======================
    // üìä TR·∫†NG TH√ÅI
    // ======================
    @Enumerated(EnumType.STRING)
    private ProductStatus status;
    private Boolean isFeatured;
    private BigDecimal ratingAverage;
    private Integer reviewCount;
    private Integer viewCount;

    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    @Column(name = "created_by", columnDefinition = "CHAR(36)")
    private UUID createdBy;
    @Column(name = "updated_by", columnDefinition = "CHAR(36)")
    private UUID updatedBy;

    // =========================
    // üîä THU·ªòC T√çNH K·ª∏ THU·∫¨T - LOA
    // =========================
     private String driverConfiguration;   // C·∫•u h√¨nh driver
    private String driverSize;            // K√≠ch th∆∞·ªõc driver
    private String frequencyResponse;     // D·∫£i t·∫ßn
    private String sensitivity;           // ƒê·ªô nh·∫°y
    private String impedance;             // Tr·ªü kh√°ng
    private String powerHandling;         // C√¥ng su·∫•t ch·ªãu t·∫£i
    private String enclosureType;         // Ki·ªÉu th√πng loa
    private String coveragePattern;       // G√≥c ph·ªß √¢m
    private String crossoverFrequency;    // T·∫ßn s·ªë c·∫Øt
    private String placementType;         // Ki·ªÉu ƒë·∫∑t (floorstanding, bookshelf, wall-mount...)
    private String connectionType;        // üîå Lo·∫°i k·∫øt n·ªëi: Bluetooth, Optical, RCA, AUX, Wi-Fi...

    // =========================
    // üé§ THU·ªòC T√çNH MICRO
    // =========================
    private String micType;               // Dynamic / Condenser
    private String polarPattern;          // Cardioid, Omni, Bidirectional...
    private String maxSPL;                // M·ª©c √°p su·∫•t √¢m t·ªëi ƒëa
    private String micOutputImpedance;    // Tr·ªü kh√°ng ƒë·∫ßu ra
    private String micSensitivity;        // ƒê·ªô nh·∫°y micro

    // =========================
    // üìª M√ÅY THU (Receiver) / AMPLI
    // =========================
    private String amplifierType;         // Class A/B/D/G
    private String totalPowerOutput;      // T·ªïng c√¥ng su·∫•t
    private String thd;                   // T·ªïng m√©o h√†i (THD)
    private String snr;                   // T·ª∑ l·ªá t√≠n hi·ªáu / nhi·ªÖu
    private Integer inputChannels;        // S·ªë k√™nh ƒë·∫ßu v√†o
    private Integer outputChannels;       // S·ªë k√™nh ƒë·∫ßu ra
    private Boolean supportBluetooth;
    private Boolean supportWifi;
    private Boolean supportAirplay;

    // =========================
    // üìÄ M√ÅY ƒê·ªåC ƒêƒ®A THAN (Turntable)
    // =========================
    private String platterMaterial;       // V·∫≠t li·ªáu m√¢m xoay
    private String motorType;             // Lo·∫°i motor (belt / direct)
    private String tonearmType;           // Lo·∫°i c·∫ßn
    private Boolean autoReturn;           // T·ª± ƒë·ªông tr·∫£ c·∫ßn

    // =========================
    // üéõÔ∏è DAC / SOUND CARD
    // =========================
    private String dacChipset;            // Chip DAC
    private String sampleRate;            // T·∫ßn s·ªë l·∫•y m·∫´u
    private String bitDepth;              // ƒê·ªô s√¢u bit
    private Boolean balancedOutput;       // C√≥ h·ªó tr·ª£ balanced kh√¥ng
    private String inputInterface;        // USB, Optical, Coaxial...
    private String outputInterface;       // RCA, XLR, 6.5mm...

    // =========================
    // üéöÔ∏è MIXER / EQ / DJ CONTROLLER
    // =========================
    private Integer channelCount;         // S·ªë k√™nh mixer
    private Boolean hasPhantomPower;      // C√≥ h·ªó tr·ª£ phantom 48V kh√¥ng
    private String eqBands;               // S·ªë d·∫£i EQ
    private String faderType;             // Lo·∫°i fader (linear, rotary)
    private Boolean builtInEffects;       // C√≥ hi·ªáu ·ª©ng t√≠ch h·ª£p kh√¥ng
    private Boolean usbAudioInterface;    // C√≥ giao di·ªán USB kh√¥ng
    private Boolean midiSupport;          // C√≥ h·ªó tr·ª£ MIDI kh√¥ng
}
