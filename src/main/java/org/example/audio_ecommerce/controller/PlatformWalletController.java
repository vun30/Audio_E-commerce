package org.example.audio_ecommerce.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.*;
import io.swagger.v3.oas.annotations.responses.*;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import org.example.audio_ecommerce.dto.response.PlatformTransactionResponse;
import org.example.audio_ecommerce.dto.response.PlatformWalletResponse;
import org.example.audio_ecommerce.entity.Enum.TransactionStatus;
import org.example.audio_ecommerce.entity.Enum.TransactionType;
import org.example.audio_ecommerce.service.PlatformWalletService;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

@Tag(
        name = "Platform Wallet",
        description = """
        C√°c API qu·∫£n l√Ω v√≠ trung gian c·ªßa n·ªÅn t·∫£ng.
        Bao g·ªìm: v√≠ c·ªßa h·ªá th·ªëng (Platform), v√≠ c·ª≠a h√†ng (Shop), v√† v√≠ kh√°ch h√†ng (Customer).  
        H·ªó tr·ª£ xem danh s√°ch, xem chi ti·∫øt v√≠, v√† l·ªçc giao d·ªãch.
        """
)
@RestController
@RequestMapping("/api/platform-wallets")
@RequiredArgsConstructor
public class PlatformWalletController {

    private final PlatformWalletService walletService;

    // ==============================
    // ü™ô L·∫§Y DANH S√ÅCH T·∫§T C·∫¢ V√ç
    // ==============================
    @Operation(
            summary = "L·∫•y danh s√°ch t·∫•t c·∫£ v√≠",
            description = """
                    - API n√†y tr·∫£ v·ªÅ danh s√°ch to√†n b·ªô v√≠ trong h·ªá th·ªëng (bao g·ªìm Platform, Shop, Customer).  
                    - M·ªói v√≠ ch·ª©a th√¥ng tin c∆° b·∫£n nh∆∞ s·ªë d∆∞, ti·ªÅn pending, ti·ªÅn done, t·ªïng refund, v.v.  
                    - D√πng cho dashboard admin ho·∫∑c th·ªëng k√™ h·ªá th·ªëng.
                    """
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "L·∫•y danh s√°ch v√≠ th√†nh c√¥ng",
                    content = @Content(array = @ArraySchema(schema = @Schema(implementation = PlatformWalletResponse.class)))),
    })
    @GetMapping
    public ResponseEntity<List<PlatformWalletResponse>> getAllWallets() {
        return ResponseEntity.ok(walletService.getAllWallets());
    }

    // ==============================
    // üë§ L·∫§Y V√ç THEO OWNER ID
    // ==============================
    @Operation(
            summary = "L·∫•y v√≠ c·ªßa ch·ªß s·ªü h·ªØu (Shop/Customer)",
            description = """
                    - D√πng ƒë·ªÉ l·∫•y chi ti·∫øt v√≠ d·ª±a theo `ownerId` (ID c·ªßa shop ho·∫∑c customer).  
                    - API n√†y c≈©ng tr·∫£ v·ªÅ danh s√°ch **giao d·ªãch (transactions)** c·ªßa v√≠ ƒë√≥.  
                    - H·ªØu √≠ch cho m√†n h√¨nh "Chi ti·∫øt v√≠" c·ªßa t·ª´ng c·ª≠a h√†ng ho·∫∑c ng∆∞·ªùi d√πng.
                    """
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "L·∫•y v√≠ th√†nh c√¥ng",
                    content = @Content(schema = @Schema(implementation = PlatformWalletResponse.class))),
            @ApiResponse(responseCode = "404", description = "Kh√¥ng t√¨m th·∫•y v√≠ cho ownerId n√†y")
    })
    @GetMapping("/owner/{ownerId}")
    public ResponseEntity<PlatformWalletResponse> getWalletByOwner(
            @Parameter(description = "ID c·ªßa ch·ªß s·ªü h·ªØu (Shop ho·∫∑c Customer)", required = true, example = "d7f1c3c8-0b33-49d4-bad4-9e0bb2b8b9a3")
            @PathVariable UUID ownerId) {
        return ResponseEntity.ok(walletService.getWalletByOwner(ownerId));
    }

    // ==============================
    // üîç L·ªåC GIAO D·ªäCH
    // ==============================
    @Operation(
        summary = "L·ªçc danh s√°ch giao d·ªãch (shop ho·∫∑c customer)",
        description = """
                - API cho ph√©p l·ªçc danh s√°ch **transaction** theo nhi·ªÅu ti√™u ch√≠:  
                  ‚Ä¢ `storeId`: l·ªçc giao d·ªãch theo c·ª≠a h√†ng.  
                  ‚Ä¢ `customerId`: l·ªçc giao d·ªãch theo kh√°ch h√†ng.  
                  ‚Ä¢ `status`: tr·∫°ng th√°i giao d·ªãch (`PENDING`, `DONE`, `FAILED`).  
                  ‚Ä¢ `type`: lo·∫°i giao d·ªãch (`HOLD`, `RELEASE`, `REFUND`, `WITHDRAW`, `DEPOSIT`, ...).  
                  ‚Ä¢ `from`, `to`: kho·∫£ng th·ªùi gian b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c (ISO date).  
                - C√°c tham s·ªë ƒë·ªÅu l√† **tu·ª≥ ch·ªçn**, c√≥ th·ªÉ k·∫øt h·ª£p nhi·ªÅu ƒëi·ªÅu ki·ªán c√πng l√∫c.  
                - K·∫øt qu·∫£ tr·∫£ v·ªÅ l√† danh s√°ch c√°c giao d·ªãch ƒë√£ l·ªçc.
                """
)
@ApiResponses({
        @ApiResponse(responseCode = "200", description = "L·ªçc giao d·ªãch th√†nh c√¥ng",
                content = @Content(array = @ArraySchema(schema = @Schema(implementation = PlatformTransactionResponse.class)))),
})
@GetMapping("/transactions/filter")
public ResponseEntity<List<PlatformTransactionResponse>> filterTransactions(
        @Parameter(description = "ID c·ª≠a h√†ng c·∫ßn l·ªçc (UUID)", example = "d7f1c3c8-0b33-49d4-bad4-9e0bb2b8b9a3")
        @RequestParam(required = false) UUID storeId,

        @Parameter(description = "ID kh√°ch h√†ng c·∫ßn l·ªçc (UUID)", example = "a5e1f3b8-2d44-4ef1-bcd4-98c12aee99ff")
        @RequestParam(required = false) UUID customerId,

        @Parameter(description = "Tr·∫°ng th√°i giao d·ªãch (PENDING, DONE, FAILED)", example = "DONE")
        @RequestParam(required = false) TransactionStatus status,

        @Parameter(description = "Lo·∫°i giao d·ªãch (HOLD, RELEASE, REFUND, WITHDRAW, ...)", example = "REFUND")
        @RequestParam(required = false) TransactionType type,

        @Parameter(description = "Ng√†y b·∫Øt ƒë·∫ßu l·ªçc (ISO format)", example = "2025-10-01T00:00:00")
        @RequestParam(required = false)
        @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
        LocalDateTime from,

        @Parameter(description = "Ng√†y k·∫øt th√∫c l·ªçc (ISO format)", example = "2025-10-12T23:59:59")
        @RequestParam(required = false)
        @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
        LocalDateTime to
) {
    return ResponseEntity.ok(walletService.filterTransactions(storeId, customerId, status, type, from, to));
}
}
