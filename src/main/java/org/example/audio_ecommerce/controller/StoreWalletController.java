package org.example.audio_ecommerce.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import org.example.audio_ecommerce.dto.response.BaseResponse;
import org.example.audio_ecommerce.dto.response.StoreWalletTransactionResponse;
import org.example.audio_ecommerce.entity.Enum.StoreWalletTransactionType;
import org.example.audio_ecommerce.service.StoreWalletService;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.UUID;

@Tag(name = "Store Wallet", description = "API qu·∫£n l√Ω v√≠ c·ª≠a h√†ng (Store Wallet)")
@RestController
@RequestMapping("/api/stores/me/wallet")
@RequiredArgsConstructor
public class StoreWalletController {

    private final StoreWalletService storeWalletService;

    // =============================================================
    // üè¶ 1Ô∏è‚É£ L·∫•y th√¥ng tin v√≠ c·ª≠a h√†ng hi·ªán t·∫°i
    // =============================================================
    @Operation(
            summary = "L·∫•y th√¥ng tin v√≠ c·ªßa c·ª≠a h√†ng ƒëang ƒëƒÉng nh·∫≠p",
            description = """
                    Tr·∫£ v·ªÅ th√¥ng tin v√≠ c·ªßa c·ª≠a h√†ng (g·ªìm s·ªë d∆∞ kh·∫£ d·ª•ng, pending, deposit, t·ªïng doanh thu, ...).
                    H·ªá th·ªëng t·ª± ƒë·ªông l·∫•y email t·ª´ token JWT c·ªßa ch·ªß c·ª≠a h√†ng.
                    """
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "L·∫•y th√¥ng tin v√≠ th√†nh c√¥ng"),
            @ApiResponse(responseCode = "404", description = "Kh√¥ng t√¨m th·∫•y v√≠ c·ª≠a h√†ng")
    })
    @GetMapping
    public ResponseEntity<BaseResponse> getMyWallet() {
        return storeWalletService.getMyWallet();
    }

    // =============================================================
    // üìú 2Ô∏è‚É£ L·∫•y danh s√°ch giao d·ªãch v√≠ (c∆° b·∫£n, l·ªçc theo type)
    // =============================================================
    @Operation(
            summary = "L·∫•y danh s√°ch giao d·ªãch v√≠ (ph√¢n trang + l·ªçc theo lo·∫°i)",
            description = """
                    Tr·∫£ v·ªÅ danh s√°ch giao d·ªãch c·ªßa v√≠ c·ª≠a h√†ng ƒëang ƒëƒÉng nh·∫≠p.
                    H·ªó tr·ª£ ph√¢n trang v√† l·ªçc theo lo·∫°i giao d·ªãch (`DEPOSIT`, `WITHDRAW`, `REFUND`, ...).
                    """
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "L·∫•y danh s√°ch giao d·ªãch th√†nh c√¥ng")
    })
    @GetMapping("/transactions")
    public ResponseEntity<BaseResponse> getMyWalletTransactions(
            @Parameter(description = "Trang hi·ªán t·∫°i (m·∫∑c ƒë·ªãnh = 0)")
            @RequestParam(defaultValue = "0") int page,

            @Parameter(description = "S·ªë l∆∞·ª£ng giao d·ªãch m·ªói trang (m·∫∑c ƒë·ªãnh = 10)")
            @RequestParam(defaultValue = "10") int size,

            @Parameter(description = "Lo·∫°i giao d·ªãch (t√πy ch·ªçn)")
            @RequestParam(required = false) String type
    ) {
        return storeWalletService.getMyWalletTransactions(page, size, type);
    }

    // =============================================================
    // üîç 3Ô∏è‚É£ L·ªçc giao d·ªãch v√≠ (theo th·ªùi gian, lo·∫°i, ID giao d·ªãch, storeId)
    // =============================================================
    @Operation(
            summary = "L·ªçc giao d·ªãch v√≠ theo th·ªùi gian, lo·∫°i v√† ID giao d·ªãch",
            description = """
                    Cho ph√©p admin ho·∫∑c c·ª≠a h√†ng l·ªçc danh s√°ch giao d·ªãch theo:
                    - `walletId` (t√πy ch·ªçn): n·∫øu kh√¥ng truy·ªÅn ‚Üí h·ªá th·ªëng t·ª± ƒë·ªông l·∫•y v√≠ c·ªßa store ƒëang login.
                    - `from` v√† `to`: kho·∫£ng th·ªùi gian (ISO format)
                    - `type`: lo·∫°i giao d·ªãch (`DEPOSIT`, `WITHDRAW`, `REFUND`, ...)
                    - `transactionId`: m√£ giao d·ªãch c·ª• th·ªÉ
                    - `sort`: ƒë·ªãnh d·∫°ng "thu·ªôc_t√≠nh:h∆∞·ªõng" (VD: createdAt:desc)
                    """
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "L·ªçc giao d·ªãch th√†nh c√¥ng"),
            @ApiResponse(responseCode = "400", description = "Tham s·ªë kh√¥ng h·ª£p l·ªá")
    })
    @GetMapping("/filter")
    public ResponseEntity<BaseResponse> filterTransactions(
            @Parameter(description = "ID v√≠ c·ª≠a h√†ng (t√πy ch·ªçn ‚Äî n·∫øu kh√¥ng truy·ªÅn, l·∫•y c·ªßa c·ª≠a h√†ng ƒëang ƒëƒÉng nh·∫≠p)")
            @RequestParam(required = false)
            UUID walletId,

            @Parameter(description = "T·ª´ th·ªùi ƒëi·ªÉm (ISO format, VD: 2025-10-13T00:00:00)")
            @RequestParam(required = false)
            @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
            LocalDateTime from,

            @Parameter(description = "ƒê·∫øn th·ªùi ƒëi·ªÉm (ISO format, VD: 2025-10-13T23:59:59)")
            @RequestParam(required = false)
            @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
            LocalDateTime to,

            @Parameter(description = "Lo·∫°i giao d·ªãch (DEPOSIT, WITHDRAW, REFUND, ...)")
            @RequestParam(required = false)
            StoreWalletTransactionType type,

            @Parameter(description = "M√£ giao d·ªãch c·ª• th·ªÉ (UUID)")
            @RequestParam(required = false)
            UUID transactionId,

            @Parameter(description = "Trang hi·ªán t·∫°i (m·∫∑c ƒë·ªãnh = 0)")
            @RequestParam(defaultValue = "0") int page,

            @Parameter(description = "S·ªë l∆∞·ª£ng m·ªói trang (m·∫∑c ƒë·ªãnh = 10)")
            @RequestParam(defaultValue = "10") int size,

            @Parameter(description = "S·∫Øp x·∫øp, ƒë·ªãnh d·∫°ng: 'thu·ªôc_t√≠nh:h∆∞·ªõng' (VD: createdAt:desc)")
            @RequestParam(defaultValue = "createdAt:desc") String sort
    ) {
        // ‚úÖ N·∫øu kh√¥ng truy·ªÅn walletId ‚Üí t·ª± ƒë·ªông l·∫•y v√≠ c·ªßa account ƒëang ƒëƒÉng nh·∫≠p
        if (walletId == null) {
            walletId = storeWalletService.resolveWalletIdForCurrentUser();
        }

        // ‚úÖ Ph√¢n t√≠ch sort theo ƒë·ªãnh d·∫°ng "property:direction"
        String[] parts = sort.split(":");
        String property = parts[0];
        Sort.Direction direction = parts.length > 1
                ? Sort.Direction.fromString(parts[1])
                : Sort.Direction.DESC;

        Pageable pageable = PageRequest.of(page, size, Sort.by(direction, property));

        Page<StoreWalletTransactionResponse> transactions = storeWalletService.filterTransactions(
                walletId, from, to, type, transactionId, pageable
        );

        return ResponseEntity.ok(
                new BaseResponse<>(200, "‚úÖ L·ªçc giao d·ªãch th√†nh c√¥ng", transactions)
        );
    }
}
