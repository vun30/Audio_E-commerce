package org.example.audio_ecommerce.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.example.audio_ecommerce.dto.request.AddToCartRequest;
import org.example.audio_ecommerce.dto.request.ToggleItemRequest;
import org.example.audio_ecommerce.dto.request.UpdateQtyRequest;
import org.example.audio_ecommerce.dto.response.CartSummaryResponse;
import org.example.audio_ecommerce.service.CartService;
import org.springframework.http.HttpStatus;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.UUID;

@RestController
@RequiredArgsConstructor
@RequestMapping("/api/cart")
@Validated
@Tag(name = "üõí Cart API", description = "C√°c API qu·∫£n l√Ω gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng (gi·ªëng Shopee).")
public class CartController {

    private final CartService cartService;

    /**
     * T·∫°m th·ªùi d√πng Header X-User-Id ƒë·ªÉ l·∫•y UUID ng∆∞·ªùi d√πng,
     * trong th·ª±c t·∫ø s·∫Ω l·∫•y t·ª´ JWT (AuthenticationPrincipal).
     */
    private UUID ownerIdFromHeader(String id) {
        return UUID.fromString(id);
    }

    // ========================================================================
    // 1Ô∏è‚É£ L·∫§Y GI·ªé H√ÄNG HI·ªÜN T·∫†I
    // ========================================================================
    @Operation(
            summary = "L·∫•y gi·ªè h√†ng hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng",
            description = """
                    L·∫•y danh s√°ch to√†n b·ªô s·∫£n ph·∫©m c√≥ trong gi·ªè h√†ng hi·ªán t·∫°i.
                    C√°c s·∫£n ph·∫©m ƒë∆∞·ª£c **group theo c·ª≠a h√†ng (store)** gi·ªëng Shopee.
                    Tr·∫£ v·ªÅ t·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m ƒë√£ tick ch·ªçn v√† t·ªïng ti·ªÅn t·∫°m t√≠nh.
                    """,
            responses = {
                    @ApiResponse(responseCode = "200", description = "L·∫•y gi·ªè h√†ng th√†nh c√¥ng",
                            content = @Content(schema = @Schema(implementation = CartSummaryResponse.class))),
                    @ApiResponse(responseCode = "401", description = "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p")
            }
    )
    @GetMapping
    public CartSummaryResponse getCart(
            @RequestHeader("X-User-Id") String userId
    ) {
        return cartService.getMyCart(ownerIdFromHeader(userId));
    }

    // ========================================================================
    // 2Ô∏è‚É£ TH√äM S·∫¢N PH·∫®M / COMBO V√ÄO GI·ªé
    // ========================================================================
    @Operation(
            summary = "Th√™m s·∫£n ph·∫©m ho·∫∑c combo v√†o gi·ªè h√†ng",
            description = """
                    D√πng khi ng∆∞·ªùi d√πng b·∫•m n√∫t **‚ÄúTh√™m v√†o gi·ªè h√†ng‚Äù** ·ªü trang s·∫£n ph·∫©m.
                    - N·∫øu gi·ªè h√†ng ch∆∞a t·ªìn t·∫°i ‚Üí h·ªá th·ªëng s·∫Ω t·ª± t·∫°o m·ªõi.
                    - N·∫øu s·∫£n ph·∫©m ƒë√£ c√≥ ‚Üí h·ªá th·ªëng c·ªông d·ªìn s·ªë l∆∞·ª£ng.
                    - Ch·ªâ truy·ªÅn 1 trong 2: `productId` ho·∫∑c `comboId`.
                    """,
            responses = {
                    @ApiResponse(responseCode = "201", description = "Th√™m v√†o gi·ªè th√†nh c√¥ng",
                            content = @Content(schema = @Schema(implementation = CartSummaryResponse.class))),
                    @ApiResponse(responseCode = "400", description = "Truy·ªÅn sai d·ªØ li·ªáu"),
                    @ApiResponse(responseCode = "404", description = "S·∫£n ph·∫©m ho·∫∑c combo kh√¥ng t·ªìn t·∫°i")
            }
    )
    @PostMapping("/items")
    @ResponseStatus(HttpStatus.CREATED)
    public CartSummaryResponse addItem(
            @RequestHeader("X-User-Id") String userId,
            @Valid @RequestBody AddToCartRequest req
    ) {
        return cartService.addToCart(ownerIdFromHeader(userId), req);
    }

    // ========================================================================
    // 3Ô∏è‚É£ TICK CH·ªåN / B·ªé CH·ªåN 1 ITEM
    // ========================================================================
//    @Operation(
//            summary = "Tick ch·ªçn ho·∫∑c b·ªè ch·ªçn s·∫£n ph·∫©m trong gi·ªè h√†ng",
//            description = """
//                    D√πng khi ng∆∞·ªùi d√πng tick/untick checkbox ·ªü giao di·ªán gi·ªè h√†ng.
//                    - Nh·ªØng s·∫£n ph·∫©m c√≥ `selected=true` s·∫Ω ƒë∆∞·ª£c t√≠nh khi checkout.
//                    - Gi·ªëng h√†nh vi ‚ÄúCh·ªçn s·∫£n ph·∫©m mu·ªën mua‚Äù tr√™n Shopee.
//                    """,
//            responses = {
//                    @ApiResponse(responseCode = "200", description = "C·∫≠p nh·∫≠t th√†nh c√¥ng",
//                            content = @Content(schema = @Schema(implementation = CartSummaryResponse.class))),
//                    @ApiResponse(responseCode = "404", description = "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong gi·ªè")
//            }
//    )
//    @PatchMapping("/items/{itemId}/toggle")
//    public CartSummaryResponse toggle(
//            @RequestHeader("X-User-Id") String userId,
//            @PathVariable UUID itemId,
//            @Valid @RequestBody ToggleItemRequest req
//    ) {
//        return cartService.toggleItem(ownerIdFromHeader(userId), itemId, Boolean.TRUE.equals(req.getSelected()));
//    }

    // ========================================================================
    // 4Ô∏è‚É£ C·∫¨P NH·∫¨T S·ªê L∆Ø·ª¢NG
    // ========================================================================
    @Operation(
            summary = "C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng",
            description = """
                    Khi ng∆∞·ªùi d√πng nh·∫•n n√∫t ‚Äú+‚Äù ho·∫∑c ‚Äú‚Äì‚Äù ƒë·ªÉ tƒÉng/gi·∫£m s·ªë l∆∞·ª£ng.
                    - Kh√¥ng cho ph√©p s·ªë l∆∞·ª£ng <= 0.
                    - T·ª± ƒë·ªông c·∫≠p nh·∫≠t l·∫°i `subtotal` (unitPrice * quantity).
                    """,
            responses = {
                    @ApiResponse(responseCode = "200", description = "C·∫≠p nh·∫≠t th√†nh c√¥ng",
                            content = @Content(schema = @Schema(implementation = CartSummaryResponse.class))),
                    @ApiResponse(responseCode = "400", description = "S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá"),
                    @ApiResponse(responseCode = "404", description = "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong gi·ªè")
            }
    )
    @PatchMapping("/items/{itemId}/quantity")
    public CartSummaryResponse updateQty(
            @RequestHeader("X-User-Id") String userId,
            @PathVariable UUID itemId,
            @Valid @RequestBody UpdateQtyRequest req
    ) {
        return cartService.updateQuantity(ownerIdFromHeader(userId), itemId, req.getQuantity());
    }

    // ========================================================================
    // 5Ô∏è‚É£ X√ìA ITEM KH·ªéI GI·ªé
    // ========================================================================
    @Operation(
            summary = "X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng",
            description = """
                    Khi ng∆∞·ªùi d√πng nh·∫•n n√∫t ‚ÄúüóëÔ∏è X√≥a‚Äù tr√™n giao di·ªán gi·ªè h√†ng.
                    - X√≥a ho√†n to√†n s·∫£n ph·∫©m ho·∫∑c combo kh·ªèi gi·ªè.
                    - Sau khi x√≥a, h·ªá th·ªëng tr·∫£ v·ªÅ gi·ªè h√†ng c√≤n l·∫°i.
                    """,
            responses = {
                    @ApiResponse(responseCode = "200", description = "X√≥a th√†nh c√¥ng",
                            content = @Content(schema = @Schema(implementation = CartSummaryResponse.class))),
                    @ApiResponse(responseCode = "404", description = "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong gi·ªè")
            }
    )
    @DeleteMapping("/items/{itemId}")
    public CartSummaryResponse remove(
            @RequestHeader("X-User-Id") String userId,
            @PathVariable UUID itemId
    ) {
        return cartService.removeItem(ownerIdFromHeader(userId), itemId);
    }
}
