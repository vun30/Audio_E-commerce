package org.example.audio_ecommerce.controller;

import lombok.RequiredArgsConstructor;
import org.example.audio_ecommerce.dto.request.CreateComboRequest;
import org.example.audio_ecommerce.dto.request.UpdateComboRequest;
import org.example.audio_ecommerce.dto.response.BaseResponse;
import org.example.audio_ecommerce.entity.Enum.StoreStatus;
import org.example.audio_ecommerce.entity.Store;
import org.example.audio_ecommerce.repository.StoreRepository;
import org.example.audio_ecommerce.service.ProductComboService;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.util.UUID;

@RestController
@RequestMapping("/api/combos")
@RequiredArgsConstructor
public class ProductComboController {

    private final ProductComboService comboService;
    private final StoreRepository storeRepository;

    /**
     * ‚úÖ H√†m ti·ªán √≠ch: Ki·ªÉm tra store t·ª´ JWT c√≥ ·ªü tr·∫°ng th√°i ACTIVE hay kh√¥ng
     * - Kh√¥ng tr·∫£ ra entity
     * - N√©m l·ªói n·∫øu kh√¥ng ƒë√∫ng store ho·∫∑c kh√¥ng active
     */
    private UUID validateActiveStoreAndGetId() {
        // üì© L·∫•y principal t·ª´ JWT (email[:ROLE])
        String principal = SecurityContextHolder.getContext().getAuthentication().getName();
        String email = principal.contains(":") ? principal.split(":")[0] : principal;

        // üîç B1: T√¨m store theo email
        Store store = storeRepository.findByAccount_Email(email)
                .orElseThrow(() -> new RuntimeException("‚ùå Kh√¥ng t√¨m th·∫•y store cho t√†i kho·∫£n: " + email));

        // üîç B2: Check tr·∫°ng th√°i ACTIVE
        boolean isActive = storeRepository.findByStoreIdAndStatus(store.getStoreId(), StoreStatus.ACTIVE).isPresent();
        if (!isActive) {
            throw new RuntimeException("‚ùå Store kh√¥ng ·ªü tr·∫°ng th√°i ACTIVE. Kh√¥ng th·ªÉ thao t√°c.");
        }

        return store.getStoreId();
    }

    /**
     * üß™ API test ki·ªÉm tra tr·∫°ng th√°i store t·ª´ token
     */
    @GetMapping("/store/me/check")
    public ResponseEntity<BaseResponse> checkMyStoreStatus() {
        validateActiveStoreAndGetId();
        return ResponseEntity.ok(new BaseResponse<>(200, "‚úÖ Store ƒëang ·ªü tr·∫°ng th√°i ACTIVE", true));
    }

    /**
     * ‚úÖ T·∫°o combo ‚Äî ch·ªâ khi store ACTIVE
     */
    @PostMapping
    public ResponseEntity<BaseResponse> createCombo(@RequestBody CreateComboRequest request) {
        UUID storeId = validateActiveStoreAndGetId();
        request.setStoreId(storeId); // ‚úÖ t·ª± ƒë·ªông g√°n storeId t·ª´ token
        return comboService.createCombo(request);
    }

    /**
     * üîé L·∫•y combo theo ID (public)
     */
    @GetMapping("/{comboId}")
    public ResponseEntity<BaseResponse> getComboById(@PathVariable UUID comboId) {
        return comboService.getComboById(comboId);
    }

    /**
     * üì¶ L·∫•y t·∫•t c·∫£ combo (public)
     */
    @GetMapping
    public ResponseEntity<BaseResponse> getAllCombos(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size,
            @RequestParam(required = false) String keyword,
            @RequestParam(required = false) String sortDir,
            @RequestParam(required = false) BigDecimal minPrice,
            @RequestParam(required = false) BigDecimal maxPrice,
            @RequestParam(required = false) Boolean isActive
    ) {
        return comboService.getAllCombos(page, size, keyword, sortDir, minPrice, maxPrice, isActive);
    }

    /**
     * üì¶ L·∫•y t·∫•t c·∫£ combo c·ªßa ch√≠nh store ƒëang login
     */
    @GetMapping("/store/me")
    public ResponseEntity<BaseResponse> getMyCombos(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size,
            @RequestParam(required = false) String keyword,
            @RequestParam(defaultValue = "asc") String sortDir,
            @RequestParam(required = false) BigDecimal minPrice,
            @RequestParam(required = false) BigDecimal maxPrice
    ) {
        UUID storeId = validateActiveStoreAndGetId();
        return comboService.getCombosByStoreId(storeId, page, size, keyword, sortDir, minPrice, maxPrice);
    }

    /**
     * ‚úèÔ∏è C·∫≠p nh·∫≠t combo ‚Äî ch·ªâ store ch·ªß v√† store ACTIVE ƒë∆∞·ª£c ph√©p
     */
    @PutMapping("/{comboId}")
    public ResponseEntity<BaseResponse> updateCombo(
            @PathVariable UUID comboId,
            @RequestBody UpdateComboRequest request
    ) {
        validateActiveStoreAndGetId(); // ‚úÖ Ki·ªÉm tra quy·ªÅn tr∆∞·ªõc
        return comboService.updateCombo(comboId, request);
    }

    /**
     * üõë V√¥ hi·ªáu h√≥a combo ‚Äî ch·ªâ store ch·ªß v√† store ACTIVE ƒë∆∞·ª£c ph√©p
     */
    @PutMapping("/{comboId}/disable")
    public ResponseEntity<BaseResponse> disableCombo(@PathVariable UUID comboId) {
        validateActiveStoreAndGetId();
        return comboService.disableCombo(comboId);
    }

    /**
     * üì¶ L·∫•y danh s√°ch s·∫£n ph·∫©m trong combo
     */
    @GetMapping("/{comboId}/products")
    public ResponseEntity<BaseResponse> getProductsInCombo(@PathVariable UUID comboId) {
        return comboService.getProductsInCombo(comboId);
    }
}
