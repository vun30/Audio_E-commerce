package org.example.audio_ecommerce.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import org.example.audio_ecommerce.dto.request.CreateComboRequest;
import org.example.audio_ecommerce.dto.request.UpdateComboRequest;
import org.example.audio_ecommerce.dto.response.BaseResponse;
import org.example.audio_ecommerce.entity.Enum.StoreStatus;
import org.example.audio_ecommerce.entity.Store;
import org.example.audio_ecommerce.repository.StoreRepository;
import org.example.audio_ecommerce.service.ProductComboService;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.util.UUID;

@Tag(name = "Product Combo", description = """
üì¶ **API Qu·∫£n l√Ω Combo s·∫£n ph·∫©m (Store)**  

**‚öôÔ∏è L∆∞u √Ω cho Frontend:**
- Kh√¥ng c·∫ßn g·ª≠i `storeId` ‚Üí BE t·ª± l·∫•y t·ª´ token ng∆∞·ªùi d√πng.
- Kh√¥ng c·∫ßn g·ª≠i `categoryId` ‚Üí BE t·ª± t√¨m danh m·ª•c c√≥ t√™n `"Combo"`.
- FE ch·ªâ c·∫ßn g·ª≠i c√°c th√¥ng tin c∆° b·∫£n (`name`, `comboPrice`, `includedProductIds`, ...).
- T·∫•t c·∫£ s·∫£n ph·∫©m trong combo ph·∫£i thu·ªôc **c√πng 1 store** v√† **ƒëang ACTIVE**.
""")
@RestController
@RequestMapping("/api/combos")
@RequiredArgsConstructor
public class ProductComboController {

    private final ProductComboService comboService;
    private final StoreRepository storeRepository;

    // =========================================================
    // ‚öôÔ∏è Helper: Ki·ªÉm tra store ƒëang login v√† ACTIVE
    // =========================================================
    private UUID validateActiveStoreAndGetId() {
        String principal = SecurityContextHolder.getContext().getAuthentication().getName();
        String email = principal.contains(":") ? principal.split(":")[0] : principal;

        Store store = storeRepository.findByAccount_Email(email)
                .orElseThrow(() -> new RuntimeException("‚ùå Kh√¥ng t√¨m th·∫•y store cho t√†i kho·∫£n: " + email));

        boolean isActive = storeRepository.findByStoreIdAndStatus(store.getStoreId(), StoreStatus.ACTIVE).isPresent();
        if (!isActive) throw new RuntimeException("‚ùå Store kh√¥ng ·ªü tr·∫°ng th√°i ACTIVE.");

        return store.getStoreId();
    }

    // =========================================================
    // ‚úÖ T·∫°o combo m·ªõi
    // =========================================================
    @Operation(summary = "‚ûï T·∫°o combo m·ªõi", description = """
        ‚Ä¢ Ch·ªâ d√†nh cho **Store ACTIVE**.  
        ‚Ä¢ BE t·ª± ƒë·ªông:
          - G·∫Øn `storeId` theo token.
          - T√¨m `categoryId` d·ª±a v√†o t√™n `"Combo"` trong DB.
        ‚Ä¢ FE **ch·ªâ c·∫ßn g·ª≠i** c√°c field sau:
          ```json
          {
            "name": "Combo Amp + Loa Hi-End",
            "shortDescription": "Tr·ªçn b·ªô d√†n nghe nh·∫°c cao c·∫•p",
            "description": "G·ªìm 1 amply + 1 c·∫∑p loa bookshelf",
            "comboPrice": 35000000,
            "includedProductIds": ["uuid-loa", "uuid-amp"]
          }
          ```
        ‚ö†Ô∏è Kh√¥ng c·∫ßn g·ª≠i `storeId` v√† `categoryId`.
    """)
    @PostMapping
    public ResponseEntity<BaseResponse> createCombo(@RequestBody CreateComboRequest request) {
        UUID storeId = validateActiveStoreAndGetId();
        request.setStoreId(storeId); // ‚úÖ BE t·ª± g√°n
        return comboService.createCombo(request);
    }

    // =========================================================
    // ‚úèÔ∏è C·∫≠p nh·∫≠t combo
    // =========================================================
    @Operation(summary = "‚úèÔ∏è C·∫≠p nh·∫≠t combo", description = """
        ‚Ä¢ Ch·ªâ **store ch·ªß combo** ƒë∆∞·ª£c ch·ªânh s·ª≠a.  
        ‚Ä¢ BE t·ª± ƒë·ªông x·ª≠ l√Ω `storeId` v√† `categoryId` ("Combo").  
        ‚Ä¢ FE ch·ªâ c·∫ßn g·ª≠i field mu·ªën c·∫≠p nh·∫≠t:  
          `name`, `description`, `comboPrice`, `includedProductIds`, ...
        ‚Ä¢ N·∫øu `includedProductIds` ch·ª©a s·∫£n ph·∫©m kh√¥ng ACTIVE ‚Üí t·ª´ ch·ªëi c·∫≠p nh·∫≠t.
    """)
    @PutMapping("/{comboId}")
    public ResponseEntity<BaseResponse> updateCombo(
            @PathVariable UUID comboId,
            @RequestBody UpdateComboRequest request
    ) {
        validateActiveStoreAndGetId();
        return comboService.updateCombo(comboId, request);
    }

    // =========================================================
    // üõë Disable combo
    // =========================================================
    @Operation(summary = "üõë V√¥ hi·ªáu h√≥a combo", description = """
        ‚Ä¢ Ch·ªâ **store ch·ªß combo** c√≥ th·ªÉ v√¥ hi·ªáu h√≥a.  
        ‚Ä¢ Thay ƒë·ªïi tr·∫°ng th√°i `isActive` ‚Üí `false`.  
        ‚Ä¢ Kh√¥ng x√≥a d·ªØ li·ªáu trong DB.  
        ‚Ä¢ FE ch·ªâ c·∫ßn g·ªçi: `PUT /api/combos/{comboId}/disable`
    """)
    @PutMapping("/{comboId}/disable")
    public ResponseEntity<BaseResponse> disableCombo(@PathVariable UUID comboId) {
        validateActiveStoreAndGetId();
        return comboService.disableCombo(comboId);
    }

    // =========================================================
    // üîç L·∫•y chi ti·∫øt combo (public)
    // =========================================================
    @Operation(summary = "üîç L·∫•y chi ti·∫øt combo", description = """
        ‚Ä¢ Tr·∫£ v·ªÅ to√†n b·ªô th√¥ng tin combo, bao g·ªìm danh s√°ch s·∫£n ph·∫©m b√™n trong.  
        ‚Ä¢ Public ‚Äî kh√¥ng y√™u c·∫ßu token.
    """)
    @GetMapping("/{comboId}")
    public ResponseEntity<BaseResponse> getComboById(@PathVariable UUID comboId) {
        return comboService.getComboById(comboId);
    }

    // =========================================================
    // üìú L·∫•y danh s√°ch combo (public)
    // =========================================================
    @Operation(summary = "üìú L·∫•y danh s√°ch combo (public)", description = """
        ‚Ä¢ Public API, kh√¥ng y√™u c·∫ßu token.  
        ‚Ä¢ C√≥ th·ªÉ l·ªçc theo:
          - `keyword`: t√™n combo  
          - `minPrice`, `maxPrice`: kho·∫£ng gi√°  
          - `isActive`: tr·∫°ng th√°i  
        ‚Ä¢ M·∫∑c ƒë·ªãnh s·∫Øp x·∫øp theo gi√° tƒÉng (`sortDir=asc`)
    """)
    @GetMapping
    public ResponseEntity<BaseResponse> getAllCombos(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size,
            @RequestParam(required = false) String keyword,
            @RequestParam(required = false) String sortDir,
            @RequestParam(required = false) BigDecimal minPrice,
            @RequestParam(required = false) BigDecimal maxPrice,
            @RequestParam(required = false) Boolean isActive
    ) {
        return comboService.getAllCombos(page, size, keyword, sortDir, minPrice, maxPrice, isActive);
    }

    // =========================================================
    // üè™ L·∫•y combo c·ªßa ch√≠nh store login
    // =========================================================
    @Operation(summary = "üè™ L·∫•y combo c·ªßa store ƒëang login", description = """
        ‚Ä¢ Ch·ªâ store ACTIVE m·ªõi g·ªçi ƒë∆∞·ª£c.  
        ‚Ä¢ BE t·ª± ƒë·ªông l·∫•y `storeId` t·ª´ token.  
        ‚Ä¢ H·ªó tr·ª£ l·ªçc theo: `keyword`, `minPrice`, `maxPrice`.  
        ‚Ä¢ FE kh√¥ng c·∫ßn truy·ªÅn b·∫•t k·ª≥ ID n√†o.
    """)
    @GetMapping("/store/me")
    public ResponseEntity<BaseResponse> getMyCombos(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size,
            @RequestParam(required = false) String keyword,
            @RequestParam(defaultValue = "asc") String sortDir,
            @RequestParam(required = false) BigDecimal minPrice,
            @RequestParam(required = false) BigDecimal maxPrice
    ) {
        UUID storeId = validateActiveStoreAndGetId();
        return comboService.getCombosByStoreId(storeId, page, size, keyword, sortDir, minPrice, maxPrice);
    }

    // =========================================================
    // üì¶ L·∫•y danh s√°ch s·∫£n ph·∫©m trong combo
    // =========================================================
    @Operation(summary = "üì¶ L·∫•y danh s√°ch s·∫£n ph·∫©m trong combo", description = """
        ‚Ä¢ Public API.  
        ‚Ä¢ Tr·∫£ v·ªÅ danh s√°ch s·∫£n ph·∫©m thu·ªôc combo, bao g·ªìm ID & t√™n s·∫£n ph·∫©m.
    """)
    @GetMapping("/{comboId}/products")
    public ResponseEntity<BaseResponse> getProductsInCombo(@PathVariable UUID comboId) {
        return comboService.getProductsInCombo(comboId);
    }
}
