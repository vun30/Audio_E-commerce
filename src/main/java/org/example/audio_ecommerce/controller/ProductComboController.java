package org.example.audio_ecommerce.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import org.example.audio_ecommerce.dto.request.CreateComboRequest;
import org.example.audio_ecommerce.dto.request.UpdateComboRequest;
import org.example.audio_ecommerce.dto.response.BaseResponse;
import org.example.audio_ecommerce.service.ProductComboService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.util.UUID;

@Tag(name = "Product Combo", description = "üì¶ API qu·∫£n l√Ω combo s·∫£n ph·∫©m - t·∫°o, c·∫≠p nh·∫≠t, l·ªçc, v√¥ hi·ªáu h√≥a, v√† xem chi ti·∫øt combo.")
@RestController
@RequestMapping("/api/combos")
@RequiredArgsConstructor
public class ProductComboController {

    private final ProductComboService productComboService;

    @Operation(
            summary = "‚ûï T·∫°o combo s·∫£n ph·∫©m",
            description = "T·∫°o combo m·ªõi t·ª´ m·ªôt product ch√≠nh (comboProductId) v√† danh s√°ch c√°c s·∫£n ph·∫©m con. **L∆∞u √Ω:** t·∫•t c·∫£ s·∫£n ph·∫©m ph·∫£i thu·ªôc c√πng 1 c·ª≠a h√†ng, n·∫øu kh√¥ng s·∫Ω b√°o l·ªói."
    )
    @PostMapping
    public ResponseEntity<BaseResponse> createCombo(@RequestBody CreateComboRequest request) {
        return productComboService.createCombo(request);
    }

    @Operation(
            summary = "üîé L·∫•y chi ti·∫øt combo",
            description = "Nh·∫≠p `comboId` ƒë·ªÉ l·∫•y th√¥ng tin chi ti·∫øt combo, bao g·ªìm s·∫£n ph·∫©m ch√≠nh, m√¥ t·∫£, gi√°, danh m·ª•c v√† danh s√°ch ID c√°c s·∫£n ph·∫©m trong combo."
    )
    @GetMapping("/{comboId}")
    public ResponseEntity<BaseResponse> getComboById(@PathVariable UUID comboId) {
        return productComboService.getComboById(comboId);
    }

    @Operation(
            summary = "üìú L·∫•y danh s√°ch combo (to√†n h·ªá th·ªëng)",
            description = """
                    L·∫•y danh s√°ch combo c√≥ h·ªó tr·ª£ **l·ªçc v√† ph√¢n trang**:
                    - `keyword`: t√¨m theo t√™n combo
                    - `sortDir`: asc (gi√° tƒÉng d·∫ßn) / desc (gi√° gi·∫£m d·∫ßn)
                    - `minPrice`, `maxPrice`: l·ªçc theo kho·∫£ng gi√°
                    - `page`, `size`: ph√¢n trang
                    """
    )
    @GetMapping
    public ResponseEntity<BaseResponse> getAllCombos(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(required = false) String keyword,
            @RequestParam(required = false) String sortDir,
            @RequestParam(required = false) BigDecimal minPrice,
            @RequestParam(required = false) BigDecimal maxPrice
    ) {
        return productComboService.getAllCombos(page, size, keyword, sortDir, minPrice, maxPrice);
    }

    @Operation(
            summary = "üè™ L·∫•y combo theo store ID",
            description = """
                    L·∫•y danh s√°ch combo thu·ªôc m·ªôt c·ª≠a h√†ng c·ª• th·ªÉ.
                    H·ªó tr·ª£ b·ªô l·ªçc v√† ph√¢n trang gi·ªëng nh∆∞ API l·∫•y t·∫•t c·∫£ combo.
                    - `storeId`: ID c·ª≠a h√†ng c·∫ßn l·ªçc
                    """
    )
    @GetMapping("/store/{storeId}")
    public ResponseEntity<BaseResponse> getCombosByStoreId(
            @PathVariable UUID storeId,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(required = false) String keyword,
            @RequestParam(required = false) String sortDir,
            @RequestParam(required = false) BigDecimal minPrice,
            @RequestParam(required = false) BigDecimal maxPrice
    ) {
        return productComboService.getCombosByStoreId(storeId, page, size, keyword, sortDir, minPrice, maxPrice);
    }

    @Operation(
            summary = "‚úèÔ∏è C·∫≠p nh·∫≠t combo",
            description = "C·∫≠p nh·∫≠t th√¥ng tin combo (·∫£nh, m√¥ t·∫£, gi√°, danh m·ª•c, danh s√°ch s·∫£n ph·∫©m...). N·∫øu danh s√°ch s·∫£n ph·∫©m thay ƒë·ªïi, h·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông t√≠nh l·∫°i gi√° g·ªëc (`originalTotalPrice`)."
    )
    @PutMapping("/{comboId}")
    public ResponseEntity<BaseResponse> updateCombo(
            @PathVariable UUID comboId,
            @RequestBody UpdateComboRequest request
    ) {
        return productComboService.updateCombo(comboId, request);
    }

    @Operation(
            summary = "üö´ V√¥ hi·ªáu h√≥a combo",
            description = "Thay v√¨ x√≥a h·∫≥n kh·ªèi DB, combo s·∫Ω ƒë∆∞·ª£c ƒë√°nh d·∫•u `isActive = false` v√† kh√¥ng hi·ªÉn th·ªã tr√™n trang b√°n h√†ng."
    )
    @PutMapping("/{comboId}/disable")
    public ResponseEntity<BaseResponse> disableCombo(@PathVariable UUID comboId) {
        return productComboService.disableCombo(comboId);
    }

    @Operation(
            summary = "üì¶ L·∫•y danh s√°ch s·∫£n ph·∫©m trong combo",
            description = "Nh·∫≠p `comboId` ƒë·ªÉ l·∫•y to√†n b·ªô chi ti·∫øt c√°c s·∫£n ph·∫©m con trong combo (ID, t√™n, gi√°, ·∫£nh, danh m·ª•c...)."
    )
    @GetMapping("/{comboId}/products")
    public ResponseEntity<BaseResponse> getProductsInCombo(@PathVariable UUID comboId) {
        return productComboService.getProductsInCombo(comboId);
    }
}
