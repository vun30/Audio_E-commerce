package org.example.audio_ecommerce.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import org.example.audio_ecommerce.dto.request.ProductRequest;
import org.example.audio_ecommerce.dto.request.UpdateProductRequest;
import org.example.audio_ecommerce.dto.response.BaseResponse;
import org.example.audio_ecommerce.entity.Enum.ProductStatus;
import org.example.audio_ecommerce.service.ProductService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.UUID;

@Tag(name = "Product", description = "üì¶ API qu·∫£n l√Ω s·∫£n ph·∫©m (Admin & Store)")
@RestController
@RequestMapping("/api/products")
@RequiredArgsConstructor
public class ProductController {

    private final ProductService productService;

    // ============================================================
    // üìú L·∫•y danh s√°ch s·∫£n ph·∫©m
    // ============================================================
     @GetMapping
    @Operation(summary = "L·∫•y danh s√°ch s·∫£n ph·∫©m (l·ªçc theo danh m·ª•c, store, keyword, status)")
    public ResponseEntity<BaseResponse> getAllProducts(
            @Parameter(
                description = "T√™n danh m·ª•c (ch·ªçn t·ª´ dropdown)",
                schema = @Schema(
                        allowableValues = {
                                "Tai Nghe", "Loa", "Micro", "DAC", "Mixer",
                                "Amp", "Turntable", "Sound Card", "DJ Controller", "Combo"
                        }
                )
            )
            @RequestParam(required = false) String categoryName,

            @RequestParam(required = false) UUID storeId,
            @RequestParam(required = false) String keyword,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size,
            @RequestParam(required = false) ProductStatus status
    ) {
        return productService.getAllProducts(categoryName, storeId, keyword, page, size, status);
    }

    // ============================================================
    // üîé L·∫•y chi ti·∫øt s·∫£n ph·∫©m
    // ============================================================
    @Operation(summary = "üîé L·∫•y chi ti·∫øt s·∫£n ph·∫©m theo ID")
    @GetMapping("/{productId}")
    public ResponseEntity<BaseResponse> getProductById(@PathVariable UUID productId) {
        return productService.getProductById(productId);
    }

    // ============================================================
    // ‚ûï T·∫°o s·∫£n ph·∫©m m·ªõi
    // ============================================================
    @Operation(
        summary = "‚ûï T·∫°o s·∫£n ph·∫©m m·ªõi (Store)",
        description = """
        ‚Ä¢ API cho ph√©p **Store** t·∫°o s·∫£n ph·∫©m m·ªõi l√™n s√†n.  
        ‚Ä¢ `categoryName` ch·ªçn 1 trong c√°c gi√° tr·ªã: **Loa**, **Tai Nghe**, **Micro**, **DAC**, **Mixer**, **Amp**, **Turntable**, **Sound Card**, **DJ Controller**, **Combo**.  
        ‚Ä¢ `storeId` ƒë∆∞·ª£c t·ª± ƒë·ªông x√°c ƒë·ªãnh t·ª´ t√†i kho·∫£n ƒëƒÉng nh·∫≠p.  
        ‚Ä¢ `slug` sinh t·ª± ƒë·ªông t·ª´ `name`.  
        ‚Ä¢ `sku` ph·∫£i duy nh·∫•t trong m·ªói c·ª≠a h√†ng.  
        ‚Ä¢ C√°c tr∆∞·ªùng gi√° g·ªìm:
          - `promotionPercent`: % khuy·∫øn m√£i ri√™ng
          - `platformFeePercent`: % ph√≠ s√†n
          - `bulkDiscounts`: danh s√°ch kho·∫£ng gi√° mua nhi·ªÅu (t√πy ch·ªçn)
        ‚Ä¢ K·∫øt qu·∫£ tr·∫£ v·ªÅ: th√¥ng tin s·∫£n ph·∫©m chi ti·∫øt.
        """
    )
    @PostMapping
    public ResponseEntity<BaseResponse> createProduct(@RequestBody ProductRequest request) {
        return productService.createProduct(request);
    }

    // ============================================================
    // ‚úèÔ∏è C·∫≠p nh·∫≠t s·∫£n ph·∫©m
    // ============================================================
    @Operation(
        summary = "‚úèÔ∏è C·∫≠p nh·∫≠t s·∫£n ph·∫©m (Store)",
        description = """
        ‚Ä¢ Cho ph√©p **Store** c·∫≠p nh·∫≠t s·∫£n ph·∫©m c·ªßa m√¨nh.  
        ‚Ä¢ C√≥ th·ªÉ thay ƒë·ªïi: 
          - `name`, `slug` s·∫Ω t·ª± sinh l·∫°i.
          - `categoryName` ‚Üí BE t·ª± map sang `categoryId`.
          - `bulkDiscounts` ‚Üí BE t·ª± c·∫≠p nh·∫≠t danh s√°ch m·ª©c gi√° mua nhi·ªÅu.
        ‚Ä¢ N·∫øu tr∆∞·ªùng n√†o kh√¥ng nh·∫≠p ‚Üí gi·ªØ nguy√™n gi√° tr·ªã c≈©.
        ‚Ä¢ K·∫øt qu·∫£: s·∫£n ph·∫©m sau khi c·∫≠p nh·∫≠t th√†nh c√¥ng.
        """
    )
    @PutMapping("/{productId}")
    public ResponseEntity<BaseResponse> updateProduct(
        @PathVariable UUID productId,
        @RequestBody ProductRequest request
) {
    return productService.updateProduct(productId, request);
}

    // ============================================================
    // üö´ V√¥ hi·ªáu h√≥a / K√≠ch ho·∫°t s·∫£n ph·∫©m
    // ============================================================
    @Operation(
        summary = "üö´ V√¥ hi·ªáu h√≥a ho·∫∑c k√≠ch ho·∫°t s·∫£n ph·∫©m",
        description = """
        ‚Ä¢ API n√†y **kh√¥ng x√≥a s·∫£n ph·∫©m kh·ªèi DB**.  
        ‚Ä¢ Ch·ªâ ƒë·ªïi tr·∫°ng th√°i gi·ªØa:
          - **ACTIVE** ‚Üî **DISCONTINUED**.  
        ‚Ä¢ D√πng khi mu·ªën ·∫©n t·∫°m th·ªùi s·∫£n ph·∫©m kh·ªèi gian h√†ng.
        """
    )
    @DeleteMapping("/{productId}")
    public ResponseEntity<BaseResponse> disableProduct(@PathVariable UUID productId) {
        return productService.disableProduct(productId);
    }
}
