package org.example.audio_ecommerce.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import org.example.audio_ecommerce.dto.request.ProductRequest;
import org.example.audio_ecommerce.dto.response.BaseResponse;
import org.example.audio_ecommerce.entity.Enum.ProductStatus;
import org.example.audio_ecommerce.service.ProductService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.UUID;

@Tag(name = "Product", description = "üì¶ API qu·∫£n l√Ω s·∫£n ph·∫©m (Admin & Store)")
@RestController
@RequestMapping("/api/products")
@RequiredArgsConstructor
public class ProductController {

    private final ProductService productService;

    @Operation(summary = "üìú L·∫•y danh s√°ch s·∫£n ph·∫©m (ph√¢n trang + l·ªçc)")
@GetMapping
public ResponseEntity<BaseResponse> getAllProducts(
        @RequestParam(required = false) UUID categoryId,
        @RequestParam(required = false) UUID storeId,
        @RequestParam(required = false) String keyword,
        @RequestParam(defaultValue = "0") int page,
        @RequestParam(defaultValue = "10") int size,
        @RequestParam(required = false) ProductStatus status // ‚úÖ th√™m v√†o
) {
    return productService.getAllProducts(categoryId, storeId, keyword, page, size, status);
}

    @Operation(summary = "üîé L·∫•y chi ti·∫øt s·∫£n ph·∫©m")
    @GetMapping("/{productId}")
    public ResponseEntity<BaseResponse> getProductById(@PathVariable UUID productId) {
        return productService.getProductById(productId);
    }

    @Operation(
    summary = "‚ûï T·∫°o s·∫£n ph·∫©m m·ªõi (Store)",
    description = """
    ‚Ä¢ API cho ph√©p **Store** t·∫°o s·∫£n ph·∫©m m·ªõi l√™n s√†n.  
    ‚Ä¢ `categoryName` ch·ªçn 1 trong c√°c gi√° tr·ªã: **Loa**, **Micro**, **Turntable**, **Mixer**, **Amp**, **DJ Controller**, **Sound Card**, **DAC**, **Combo**.  
    ‚Ä¢ `storeId` ƒë∆∞·ª£c l·∫•y t·ª± ƒë·ªông t·ª´ t√†i kho·∫£n ƒëang ƒëƒÉng nh·∫≠p.  
    ‚Ä¢ `slug` ƒë∆∞·ª£c sinh t·ª± ƒë·ªông t·ª´ `name`.  
    ‚Ä¢ `sku` ph·∫£i duy nh·∫•t trong m·ªói c·ª≠a h√†ng.  
    ‚Ä¢ T·∫•t c·∫£ c√°c tr∆∞·ªùng kh√°c l√† t√πy ch·ªçn (c√≥ th·ªÉ null).  
    ‚Ä¢ K·∫øt qu·∫£ tr·∫£ v·ªÅ: th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m v·ª´a ƒë∆∞·ª£c t·∫°o.
    """
)
    @PostMapping
    public ResponseEntity<BaseResponse> createProduct(@RequestBody ProductRequest request) {
        return productService.createProduct(request);
    }

    @Operation(
    summary = "‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m (Store)",
    description = """
    ‚Ä¢ Cho ph√©p **Store** c·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m c·ªßa m√¨nh.  
    ‚Ä¢ C√≥ th·ªÉ ƒë·ªïi `categoryName`, h·ªá th·ªëng s·∫Ω t·ª± t√¨m `categoryId` t∆∞∆°ng ·ª©ng trong DB.  
    ‚Ä¢ C√≥ th·ªÉ ƒë·ªïi `name`, `slug` s·∫Ω t·ª± sinh l·∫°i.  
    ‚Ä¢ `sku` c√≥ th·ªÉ ƒë·ªïi, nh∆∞ng ph·∫£i **duy nh·∫•t trong store**.  
    ‚Ä¢ C√°c tr∆∞·ªùng kh√°c n·∫øu ƒë·ªÉ tr·ªëng s·∫Ω **gi·ªØ nguy√™n gi√° tr·ªã c≈©**.  
    ‚Ä¢ K·∫øt qu·∫£ tr·∫£ v·ªÅ: s·∫£n ph·∫©m sau khi c·∫≠p nh·∫≠t th√†nh c√¥ng.
    """
)
    @PutMapping("/{productId}")
    public ResponseEntity<BaseResponse> updateProduct(
            @PathVariable UUID productId,
            @RequestBody ProductRequest request
    ) {
        return productService.updateProduct(productId, request);
    }

    @Operation(
    summary = "üö´ V√¥ hi·ªáu h√≥a ho·∫∑c k√≠ch ho·∫°t l·∫°i s·∫£n ph·∫©m",
    description = """
    ‚Ä¢ API n√†y **kh√¥ng x√≥a s·∫£n ph·∫©m kh·ªèi DB**.  
    ‚Ä¢ Thay v√†o ƒë√≥, ch·ªâ ƒë·ªïi tr·∫°ng th√°i gi·ªØa:
      - **ACTIVE** ‚Üî **DISCONTINUED**.  
    ‚Ä¢ D√πng khi mu·ªën ·∫©n t·∫°m th·ªùi s·∫£n ph·∫©m kh·ªèi gian h√†ng.  
    ‚Ä¢ K·∫øt qu·∫£ tr·∫£ v·ªÅ s·∫£n ph·∫©m v·ªõi tr·∫°ng th√°i m·ªõi.
    """
)
    @DeleteMapping("/{productId}")
    public ResponseEntity<BaseResponse> disableProduct(@PathVariable UUID productId) {
        return productService.disableProduct(productId);
    }
}
