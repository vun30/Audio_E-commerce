package org.example.audio_ecommerce.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import org.example.audio_ecommerce.dto.request.ShopVoucherRequest;
import org.example.audio_ecommerce.dto.response.BaseResponse;
import org.example.audio_ecommerce.service.ShopVoucherService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.UUID;

@Tag(name = "Shop Voucher", description = "API qu·∫£n l√Ω m√£ gi·∫£m gi√° c·ªßa c·ª≠a h√†ng (shop vouchers)")
@RestController
@RequestMapping("/api/shop-vouchers")
@RequiredArgsConstructor
public class ShopVoucherController {

    private final ShopVoucherService service;

    // ============================================================
    // ‚ûï CREATE
    // ============================================================
    @Operation(
            summary = "T·∫°o m·ªõi voucher cho nhi·ªÅu s·∫£n ph·∫©m",
            description = """
                    Cho ph√©p c·ª≠a h√†ng t·∫°o voucher v√† √°p d·ª•ng cho nhi·ªÅu s·∫£n ph·∫©m.
                    <br><br>‚öôÔ∏è **Logic t·ª± ƒë·ªông:**
                    - N·∫øu `discountPercent` kh√°c null ‚Üí √°p d·ª•ng gi·∫£m theo %.
                    - N·∫øu `discountAmount` kh√°c null ‚Üí √°p d·ª•ng gi·∫£m theo s·ªë ti·ªÅn c·ªë ƒë·ªãnh.
                    - N·∫øu c·∫£ 2 ƒë·ªÅu null ‚Üí gi·ªØ nguy√™n gi√°.
                    <br><br>‚úÖ **L∆∞u √Ω:** Ch·ªâ c√≥ th·ªÉ √°p voucher cho s·∫£n ph·∫©m thu·ªôc ch√≠nh c·ª≠a h√†ng ƒë√≥.
                    """,
            requestBody = @io.swagger.v3.oas.annotations.parameters.RequestBody(
                    required = true,
                    description = "Th√¥ng tin t·∫°o voucher m·ªõi",
                    content = @Content(
                            schema = @Schema(implementation = ShopVoucherRequest.class),
                            examples = @ExampleObject(value = """
                                    {
                                      "code": "SALE10K",
                                      "title": "Gi·∫£m 10K to√†n shop",
                                      "description": "√Åp d·ª•ng cho ƒë∆°n h√†ng t·ª´ 100K tr·ªü l√™n",
                                      "type": "FIXED",
                                      "discountValue": 10000,
                                      "discountPercent": null,
                                      "maxDiscountValue": null,
                                      "minOrderValue": 100000,
                                      "totalVoucherIssued": 100,
                                      "totalUsageLimit": 100,
                                      "usagePerUser": 2,
                                      "startTime": "2025-10-20T00:00:00",
                                      "endTime": "2025-11-20T23:59:59",
                                      "products": [
                                        {
                                          "productId": "b6dbb60e-bfe5-4e5f-ae7f-bcfb9a1b529a",
                                          "discountPercent": 10,
                                          "discountAmount": null,
                                          "promotionStockLimit": 50,
                                          "purchaseLimitPerCustomer": 2
                                        },
                                        {
                                          "productId": "a2c44cda-1f44-4d9a-84e9-6f2b4f5e8a7a",
                                          "discountPercent": null,
                                          "discountAmount": 20000,
                                          "promotionStockLimit": 30,
                                          "purchaseLimitPerCustomer": 1
                                        }
                                      ]
                                    }
                                    """)
                    )
            ),
            responses = {
                    @ApiResponse(responseCode = "201", description = "Voucher created successfully"),
                    @ApiResponse(responseCode = "400", description = "Invalid data or logic error"),
                    @ApiResponse(responseCode = "401", description = "Unauthorized access")
            }
    )
    @PostMapping
    public ResponseEntity<BaseResponse> createVoucher(@RequestBody ShopVoucherRequest req) {
        return service.createVoucher(req);
    }

    // ============================================================
    // üì¶ GET ALL
    // ============================================================
    @Operation(
            summary = "L·∫•y t·∫•t c·∫£ voucher c·ªßa c·ª≠a h√†ng hi·ªán t·∫°i",
            description = """
                    Tr·∫£ v·ªÅ danh s√°ch t·∫•t c·∫£ voucher thu·ªôc v·ªÅ c·ª≠a h√†ng ƒëang ƒëƒÉng nh·∫≠p.
                    Bao g·ªìm c√°c voucher ƒëang ho·∫°t ƒë·ªông, ƒë√£ h·∫øt h·∫°n ho·∫∑c b·ªã v√¥ hi·ªáu h√≥a.
                    """
    )
    @GetMapping
    public ResponseEntity<BaseResponse> getAllVouchers() {
        return service.getAllVouchers();
    }

    // ============================================================
    // üîç GET BY ID
    // ============================================================
    @Operation(
            summary = "Xem chi ti·∫øt voucher theo ID",
            description = """
                    L·∫•y chi ti·∫øt voucher bao g·ªìm th√¥ng tin c·∫•u h√¨nh v√† danh s√°ch s·∫£n ph·∫©m √°p d·ª•ng.
                    """,
            responses = {
                    @ApiResponse(responseCode = "200", description = "Voucher detail retrieved successfully"),
                    @ApiResponse(responseCode = "404", description = "Voucher not found")
            }
    )
    @GetMapping("/{id}")
    public ResponseEntity<BaseResponse> getVoucherById(@PathVariable UUID id) {
        return service.getVoucherById(id);
    }

    // ============================================================
    // üö´ DISABLE / ENABLE
    // ============================================================
    @Operation(
            summary = "B·∫≠t / T·∫Øt tr·∫°ng th√°i voucher",
            description = """
                    Cho ph√©p admin ho·∫∑c ch·ªß shop chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i voucher.
                    <br><br>
                    - N·∫øu voucher ƒëang **ACTIVE** ‚Üí ƒë·ªïi sang **DISABLED**.  
                    - N·∫øu voucher ƒëang **DISABLED** ‚Üí ƒë·ªïi l·∫°i **ACTIVE**.
                    """,
            responses = {
                    @ApiResponse(responseCode = "200", description = "Voucher status toggled successfully"),
                    @ApiResponse(responseCode = "404", description = "Voucher not found")
            }
    )
    @PatchMapping("/{id}/toggle")
    public ResponseEntity<BaseResponse> toggleVoucher(@PathVariable UUID id) {
        return service.disableVoucher(id);
    }
}
