package org.example.audio_ecommerce.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.*;
import io.swagger.v3.oas.annotations.responses.*;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.example.audio_ecommerce.dto.request.UpdateStoreRequest;
import org.example.audio_ecommerce.dto.request.UpdateStoreStatusRequest;
import org.example.audio_ecommerce.dto.response.BaseResponse;
import org.example.audio_ecommerce.service.StoreService;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;

import java.util.UUID;

@Tag(name = "Store", description = "C√°c API qu·∫£n l√Ω c·ª≠a h√†ng (Admin & Ch·ªß shop)")
@RestController
@RequestMapping("/api/stores")
@RequiredArgsConstructor
public class StoreController {

    private final StoreService storeService;

    @Operation(summary = "Xem chi ti·∫øt c·ª≠a h√†ng", description = "Tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt c·ªßa c·ª≠a h√†ng theo `storeId`.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "L·∫•y th√¥ng tin c·ª≠a h√†ng th√†nh c√¥ng"),
            @ApiResponse(responseCode = "404", description = "Kh√¥ng t√¨m th·∫•y c·ª≠a h√†ng")
    })
    @GetMapping("/{storeId}")
    public ResponseEntity<BaseResponse> getStoreById(
            @Parameter(description = "ID c·ª≠a h√†ng (UUID)", required = true)
            @PathVariable UUID storeId) {
        return storeService.getStoreById(storeId);
    }

    @Operation(summary = "L·∫•y c·ª≠a h√†ng theo t√†i kho·∫£n", description = "D√πng ƒë·ªÉ l·∫•y c·ª≠a h√†ng c·ªßa ch·ªß shop d·ª±a v√†o `accountId`.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "L·∫•y th√¥ng tin c·ª≠a h√†ng th√†nh c√¥ng"),
            @ApiResponse(responseCode = "404", description = "Kh√¥ng t√¨m th·∫•y c·ª≠a h√†ng cho t√†i kho·∫£n n√†y")
    })
    @GetMapping("/account/{accountId}")
    public ResponseEntity<BaseResponse> getStoreByAccount(
            @Parameter(description = "ID t√†i kho·∫£n (UUID)", required = true)
            @PathVariable UUID accountId) {
        return storeService.getStoreByAccountId(accountId);
    }

    @Operation(
            summary = "C·∫≠p nh·∫≠t th√¥ng tin c·ª≠a h√†ng",
            description = "Ch·ªß shop c√≥ th·ªÉ ch·ªânh s·ª≠a c√°c th√¥ng tin c∆° b·∫£n c·ªßa c·ª≠a h√†ng.",
            requestBody = @io.swagger.v3.oas.annotations.parameters.RequestBody(
                    required = true,
                    description = "Th√¥ng tin c·ª≠a h√†ng c·∫ßn c·∫≠p nh·∫≠t",
                    content = @Content(
                            schema = @Schema(implementation = UpdateStoreRequest.class),
                            examples = @ExampleObject(value = """
                                        {
                                          "storeName": "Loa Nghe Nh·∫°c Cao C·∫•p",
                                          "description": "Chuy√™n thi·∫øt b·ªã √¢m thanh Hi-End",
                                          "logoUrl": "https://cdn.example.com/logo.png",
                                          "coverImageUrl": "https://cdn.example.com/cover.jpg",
                                          "address": "123 Nguy·ªÖn Tr√£i, H√† N·ªôi",
                                          "phoneNumber": "0987654321",
                                          "email": "contact@store.vn"
                                        }
                                    """)
                    )
            )
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "C·∫≠p nh·∫≠t th√†nh c√¥ng"),
            @ApiResponse(responseCode = "404", description = "Kh√¥ng t√¨m th·∫•y c·ª≠a h√†ng")
    })
    @PutMapping("/{storeId}")
    public ResponseEntity<BaseResponse> updateStore(
            @Parameter(description = "ID c·ª≠a h√†ng (UUID)", required = true)
            @PathVariable UUID storeId,
            @Valid @RequestBody UpdateStoreRequest request) {
        return storeService.updateStore(storeId, request);
    }

    @Operation(
            summary = "Thay ƒë·ªïi tr·∫°ng th√°i c·ª≠a h√†ng",
            description = "Admin c√≥ th·ªÉ chuy·ªÉn tr·∫°ng th√°i c·ª≠a h√†ng (`ACTIVE`, `INACTIVE`, `PENDING`, `REJECTED`).",
            requestBody = @io.swagger.v3.oas.annotations.parameters.RequestBody(
                    required = true,
                    description = "Tr·∫°ng th√°i m·ªõi cho c·ª≠a h√†ng",
                    content = @Content(
                            schema = @Schema(implementation = UpdateStoreStatusRequest.class),
                            examples = @ExampleObject(value = """
                                        {
                                          "status": "ACTIVE"
                                        }
                                    """)
                    )
            )
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng"),
            @ApiResponse(responseCode = "404", description = "Kh√¥ng t√¨m th·∫•y c·ª≠a h√†ng")
    })
    @PatchMapping("/{storeId}/status")
    public ResponseEntity<BaseResponse> updateStoreStatus(
            @Parameter(description = "ID c·ª≠a h√†ng (UUID)", required = true)
            @PathVariable UUID storeId,
            @Valid @RequestBody UpdateStoreStatusRequest request) {
        return storeService.updateStoreStatus(storeId, request.getStatus());
    }

    @Operation(
            summary = "Danh s√°ch c·ª≠a h√†ng (ph√¢n trang + t√¨m ki·∫øm)",
            description = """
                    - API tr·∫£ v·ªÅ danh s√°ch t·∫•t c·∫£ c·ª≠a h√†ng c√≥ h·ªó tr·ª£ **ph√¢n trang** v√† **t√¨m ki·∫øm g·∫ßn ƒë√∫ng theo t√™n** (gi·ªëng Google).
                    - C√°c tham s·ªë:
                      - `page`: s·ªë trang (m·∫∑c ƒë·ªãnh = 0)
                      - `size`: s·ªë b·∫£n ghi m·ªói trang (m·∫∑c ƒë·ªãnh = 10)
                      - `keyword`: t·ª´ kh√≥a t√¨m ki·∫øm t√™n c·ª≠a h√†ng (kh√¥ng b·∫Øt bu·ªôc)
                    """
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "L·∫•y danh s√°ch th√†nh c√¥ng")
    })
    @GetMapping
    public ResponseEntity<BaseResponse> getAllStores(
            @Parameter(description = "S·ªë trang (b·∫Øt ƒë·∫ßu t·ª´ 0)", example = "0")
            @RequestParam(defaultValue = "0") int page,
            @Parameter(description = "S·ªë b·∫£n ghi m·ªói trang", example = "10")
            @RequestParam(defaultValue = "10") int size,
            @Parameter(description = "T·ª´ kh√≥a t√¨m ki·∫øm (kh√¥ng b·∫Øt bu·ªôc)", example = "loa")
            @RequestParam(required = false) String keyword
    ) {
        return storeService.getAllStores(page, size, keyword);
    }

    @Operation(
            summary = "L·∫•y th√¥ng tin c·ª≠a h√†ng ƒëang ƒëƒÉng nh·∫≠p",
            description = """
                    API d√πng ƒë·ªÉ l·∫•y UUID c·ªßa c·ª≠a h√†ng hi·ªán ƒëang login.
                    H·ªá th·ªëng s·∫Ω ƒë·ªçc `email` t·ª´ token JWT, sau ƒë√≥ t√¨m c·ª≠a h√†ng t∆∞∆°ng ·ª©ng.
                    Ch·ªâ d√†nh cho ng∆∞·ªùi d√πng c√≥ role `STOREOWNER`.
                    """
    )
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "L·∫•y th√†nh c√¥ng storeId c·ªßa c·ª≠a h√†ng"),
            @ApiResponse(responseCode = "404", description = "Kh√¥ng t√¨m th·∫•y c·ª≠a h√†ng cho t√†i kho·∫£n n√†y")
    })
    @GetMapping("/me/id")
    public ResponseEntity<BaseResponse> getMyStoreId() {
        // üîê L·∫•y email t·ª´ JWT trong SecurityContext
        String principal = SecurityContextHolder.getContext().getAuthentication().getName();
        String email = principal.contains(":") ? principal.split(":")[0] : principal;

        // üîé T√¨m store theo email
        var storeOpt = storeService.getStoreByEmail(email);
        if (storeOpt.isEmpty()) {
            return ResponseEntity.status(404)
                    .body(new BaseResponse<>(404, "‚ùå Kh√¥ng t√¨m th·∫•y c·ª≠a h√†ng cho t√†i kho·∫£n: " + email, null));
        }

        // ‚úÖ Tr·∫£ v·ªÅ storeId
        UUID storeId = storeOpt.get().getStoreId();
        return ResponseEntity.ok(
                new BaseResponse<>(200, "‚úÖ L·∫•y storeId th√†nh c√¥ng", storeId)
        );
    }
}
