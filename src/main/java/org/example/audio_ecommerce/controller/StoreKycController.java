package org.example.audio_ecommerce.controller;

import lombok.RequiredArgsConstructor;
import org.example.audio_ecommerce.dto.request.StoreKycRequest;
import org.example.audio_ecommerce.dto.response.BaseResponse;
import org.example.audio_ecommerce.entity.StoreKyc;
import org.example.audio_ecommerce.entity.Enum.KycStatus;
import org.example.audio_ecommerce.service.StoreKycService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.UUID;

@RestController
@RequestMapping("/api/stores/{storeId}/kyc")
@RequiredArgsConstructor
public class StoreKycController {

    private final StoreKycService storeKycService;

    // üì® G·ª≠i request KYC
    @PostMapping
    public ResponseEntity<StoreKyc> submitKyc(@PathVariable UUID storeId,
                                              @RequestBody StoreKycRequest request) {
        return ResponseEntity.ok(storeKycService.submitKyc(storeId, request));
    }

    // üìú L·∫•y danh s√°ch t·∫•t c·∫£ request c·ªßa c·ª≠a h√†ng
    @GetMapping
    public ResponseEntity<List<StoreKyc>> getAllRequests(@PathVariable UUID storeId) {
        return ResponseEntity.ok(storeKycService.getAllRequestsOfStore(storeId));
    }

    // üìú L·∫•y chi ti·∫øt 1 request c·ª• th·ªÉ
    @GetMapping("/{kycId}")
    public ResponseEntity<StoreKyc> getRequestDetail(@PathVariable String kycId) {
        return ResponseEntity.ok(storeKycService.getRequestDetail(kycId));
    }

    // üìú Admin: L·∫•y t·∫•t c·∫£ request theo tr·∫°ng th√°i (VD: PENDING)
    @GetMapping("/status/{status}")
    public ResponseEntity<List<StoreKyc>> getRequestsByStatus(@PathVariable KycStatus status) {
        return ResponseEntity.ok(storeKycService.getRequestsByStatus(status));
    }

    // ‚úÖ Admin duy·ªát ƒë∆°n
    @PatchMapping("/{kycId}/approve")
    public ResponseEntity<String> approve(@PathVariable String kycId) {
        storeKycService.approveKyc(kycId);
        return ResponseEntity.ok("KYC approved and store activated ‚úÖ");
    }

    // ‚ùå Admin t·ª´ ch·ªëi ƒë∆°n
    @PatchMapping("/{kycId}/reject")
    public ResponseEntity<String> reject(@PathVariable String kycId,
                                         @RequestParam String reason) {
        storeKycService.rejectKyc(kycId, reason);
        return ResponseEntity.ok("KYC rejected ‚ùå: " + reason);
    }

      // ‚úÖ L·∫•y t·∫•t c·∫£ request KYC theo tr·∫°ng th√°i (Admin d√πng)
    @GetMapping("/status")
    public ResponseEntity<BaseResponse> getAllKycByStatus(@RequestParam KycStatus status) {
        List<StoreKyc> list = storeKycService.getRequestsByStatus(status);
        return ResponseEntity.ok(
                new BaseResponse<>(200, "Danh s√°ch KYC theo tr·∫°ng th√°i: " + status, list)
        );
    }
}
