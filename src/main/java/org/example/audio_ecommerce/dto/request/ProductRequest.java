package org.example.audio_ecommerce.dto.request;

import io.swagger.v3.oas.annotations.media.Schema;
import lombok.*;
import java.math.BigDecimal;
import java.util.List;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ProductRequest {

    // ======================
    // üîó Li√™n k·∫øt & Danh m·ª•c
    // ======================
    @Schema(
        description = "T√™n danh m·ª•c s·∫£n ph·∫©m (BE t·ª± √°nh x·∫° sang categoryId t∆∞∆°ng ·ª©ng)",
        example = "Loa",
        allowableValues = {
            "Tai Nghe","Loa","Micro","DAC","Mixer","Amp",
            "Turntable","Sound Card","DJ Controller","Combo"
        }
    )
    private String categoryName;

    @Schema(description = "T√™n th∆∞∆°ng hi·ªáu", example = "Sony")
    private String brandName;

    @Schema(description = "M√£ SKU c·ªßa s·∫£n ph·∫©m", example = "SONY-SPK-001")
    private String sku;

    // ======================
    // üîñ Th√¥ng tin c∆° b·∫£n
    // ======================
    @Schema(description = "T√™n s·∫£n ph·∫©m", example = "Sony SRS-XB33 Extra Bass")
    private String name;

    @Schema(description = "M√¥ t·∫£ ng·∫Øn", example = "Loa Bluetooth ch·ªëng n∆∞·ªõc, √¢m tr·∫ßm m·∫°nh m·∫Ω")
    private String shortDescription;

    @Schema(description = "M√¥ t·∫£ chi ti·∫øt s·∫£n ph·∫©m (HTML ho·∫∑c text)")
    private String description;

    @Schema(description = "M√£ model", example = "SRS-XB33")
    private String model;

    @Schema(description = "M√†u s·∫Øc s·∫£n ph·∫©m", example = "ƒêen")
    private String color;

    @Schema(description = "Ch·∫•t li·ªáu v·ªè", example = "Nh·ª±a ABS cao c·∫•p")
    private String material;

    @Schema(description = "K√≠ch th∆∞·ªõc (D√†i x R·ªông x Cao)", example = "24cm x 10cm x 12cm")
    private String dimensions;

    @Schema(description = "Tr·ªçng l∆∞·ª£ng (kg)", example = "1.2")
    private BigDecimal weight;

    // ======================
    // üì∏ Media
    // ======================
    @Schema(description = "Danh s√°ch URL h√¨nh ·∫£nh s·∫£n ph·∫©m")
    private List<String> images;

    @Schema(description = "Video m√¥ t·∫£ s·∫£n ph·∫©m", example = "https://youtube.com/xyz123")
    private String videoUrl;

    // ======================
    // üí∞ Gi√° & Khuy·∫øn m√£i
    // ======================
    @Schema(description = "Gi√° g·ªëc c·ªßa s·∫£n ph·∫©m", example = "1500000")
    private BigDecimal price;

    @Schema(description = "Gi√° gi·∫£m ri√™ng (shop t·ª± ƒë·∫∑t)", example = "1200000")
    private BigDecimal discountPrice;

    @Schema(description = "Ph·∫ßn trƒÉm khuy·∫øn m√£i (to√†n s√†n ho·∫∑c ri√™ng s·∫£n ph·∫©m)", example = "10")
    private BigDecimal promotionPercent;

    @Schema(description = "Gi√° sau khi √°p d·ª•ng khuy·∫øn m√£i", example = "1080000")
    private BigDecimal priceAfterPromotion;

    @Schema(description = "Gi√° hi·ªÉn th·ªã tr∆∞·ªõc khi √°p voucher", example = "1080000")
    private BigDecimal priceBeforeVoucher;

    @Schema(description = "Gi√° cu·ªëi c√πng sau khi √°p voucher (gi√° thanh to√°n th·ª±c t·∫ø)", example = "990000")
    private BigDecimal finalPrice;

    @Schema(description = "% ph√≠ s√†n t√≠nh tr√™n m·ªói s·∫£n ph·∫©m", example = "5")
    private BigDecimal platformFeePercent;

    @Schema(description = "Lo·∫°i ti·ªÅn t·ªá", example = "VND")
    private String currency;

    @Schema(description = "S·ªë l∆∞·ª£ng t·ªìn kho hi·ªán t·∫°i", example = "50")
    private Integer stockQuantity;

    @Schema(description = "ƒê·ªãa ch·ªâ kho h√†ng", example = "HCM - Qu·∫≠n 7")
    private String warehouseLocation;

    @Schema(description = "ƒê·ªãa ch·ªâ giao h√†ng / xu·∫•t kho")
    private String shippingAddress;

    // ======================
    // üßÆ Mua nhi·ªÅu gi·∫£m gi√° (Bulk Discounts)
    // ======================
    @Schema(description = "Danh s√°ch c√°c m·ª©c gi·∫£m gi√° theo s·ªë l∆∞·ª£ng mua")
    private List<BulkDiscountRequest> bulkDiscounts;

    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public static class BulkDiscountRequest {
        @Schema(description = "S·ªë l∆∞·ª£ng t·ªëi thi·ªÉu ƒë·ªÉ √°p d·ª•ng m·ª©c gi√° n√†y", example = "5")
        private Integer fromQuantity;

        @Schema(description = "S·ªë l∆∞·ª£ng t·ªëi ƒëa cho m·ª©c gi√° n√†y", example = "10")
        private Integer toQuantity;

        @Schema(description = "ƒê∆°n gi√° khi mua trong kho·∫£ng n√†y", example = "900000")
        private BigDecimal unitPrice;
    }

    // ======================
    // ‚öôÔ∏è K·ªπ thu·∫≠t chung / B·∫£o h√†nh
    // ======================
    @Schema(description = "ƒêi·ªán √°p ƒë·∫ßu v√†o", example = "5V")
    private String voltageInput;

    @Schema(description = "Th·ªùi gian b·∫£o h√†nh", example = "12 th√°ng")
    private String warrantyPeriod;

    @Schema(description = "Lo·∫°i b·∫£o h√†nh", example = "Ch√≠nh h√£ng")
    private String warrantyType;

    @Schema(description = "T√™n nh√† s·∫£n xu·∫•t", example = "Sony Corporation")
    private String manufacturerName;

    @Schema(description = "ƒê·ªãa ch·ªâ nh√† s·∫£n xu·∫•t", example = "Tokyo, Japan")
    private String manufacturerAddress;

    @Schema(description = "T√¨nh tr·∫°ng s·∫£n ph·∫©m (M·ªõi / Like New)", example = "M·ªõi 100%")
    private String productCondition;

    @Schema(description = "S·∫£n ph·∫©m ƒë·∫∑t ri√™ng theo y√™u c·∫ßu", example = "false")
    private Boolean isCustomMade;

    // ======================
    // üéß Tai nghe (Headphone)
    // ======================
    @Schema(description = "Lo·∫°i tai nghe", example = "Over-ear")
    private String headphoneType;

    @Schema(description = "Thi·∫øt b·ªã t∆∞∆°ng th√≠ch", example = "PC, ƒëi·ªán tho·∫°i, TV")
    private String compatibleDevices;

    @Schema(description = "Tai nghe th·ªÉ thao chuy√™n d·ª•ng", example = "false")
    private Boolean isSportsModel;

    @Schema(description = "T√≠nh nƒÉng tai nghe", example = "Ch·ªëng ·ªìn, Mic ƒë√†m tho·∫°i, Bluetooth 5.3")
    private String headphoneFeatures;

    @Schema(description = "Dung l∆∞·ª£ng pin (n·∫øu c√≥)", example = "800mAh")
    private String batteryCapacity;

    @Schema(description = "C√≥ pin t√≠ch h·ª£p hay kh√¥ng", example = "true")
    private Boolean hasBuiltInBattery;

    @Schema(description = "Tai nghe chuy√™n d·ª•ng cho game", example = "false")
    private Boolean isGamingHeadset;

    @Schema(description = "Ph·ª• ki·ªán ƒëi k√®m", example = "Earpad, Cable Type-C")
    private String headphoneAccessoryType;

    @Schema(description = "C·ªïng k·∫øt n·ªëi tai nghe", example = "Type-C, 3.5mm")
    private String headphoneConnectionType;

    @Schema(description = "Lo·∫°i ƒë·∫ßu c·∫Øm", example = "3.5mm")
    private String plugType;

    @Schema(description = "SIRIM Approved (Ch·ª©ng nh·∫≠n)", example = "false")
    private Boolean sirimApproved;

    @Schema(description = "SIRIM Certified (ƒê√£ ch·ª©ng nh·∫≠n)", example = "false")
    private Boolean sirimCertified;

    @Schema(description = "MCMC Approved", example = "false")
    private Boolean mcmcApproved;

    // ======================
    // üîä Loa (Speaker)
    // ======================
    @Schema(description = "C·∫•u h√¨nh driver", example = "2-way")
    private String driverConfiguration;

    @Schema(description = "K√≠ch th∆∞·ªõc driver", example = "6.5 inch")
    private String driverSize;

    @Schema(description = "D·∫£i t·∫ßn ƒë√°p ·ª©ng", example = "20Hz - 20000Hz")
    private String frequencyResponse;

    @Schema(description = "ƒê·ªô nh·∫°y (dB)", example = "90")
    private String sensitivity;

    @Schema(description = "Tr·ªü kh√°ng (Ohm)", example = "8")
    private String impedance;

    @Schema(description = "C√¥ng su·∫•t ch·ªãu t·∫£i", example = "100W")
    private String powerHandling;

    @Schema(description = "Ki·ªÉu th√πng loa", example = "Bass Reflex")
    private String enclosureType;

    @Schema(description = "G√≥c ph·ªß √¢m", example = "90¬∞ x 60¬∞")
    private String coveragePattern;

    @Schema(description = "T·∫ßn s·ªë c·∫Øt", example = "2.5kHz")
    private String crossoverFrequency;

    @Schema(description = "Ki·ªÉu ƒë·∫∑t loa", example = "Bookshelf")
    private String placementType;

    @Schema(description = "Ki·ªÉu k·∫øt n·ªëi", example = "Bluetooth, Optical, RCA")
    private String connectionType;

    // ======================
    // üìª Ampli / Receiver
    // ======================
    @Schema(description = "Lo·∫°i ampli", example = "Class D")
    private String amplifierType;

    @Schema(description = "T·ªïng c√¥ng su·∫•t", example = "2x50W")
    private String totalPowerOutput;

    @Schema(description = "T·ªïng m√©o h√†i (THD)", example = "<0.01%")
    private String thd;

    @Schema(description = "T·ª∑ l·ªá SNR (Signal to Noise Ratio)", example = "100dB")
    private String snr;

    @Schema(description = "S·ªë k√™nh ƒë·∫ßu v√†o", example = "4")
    private Integer inputChannels;

    @Schema(description = "S·ªë k√™nh ƒë·∫ßu ra", example = "2")
    private Integer outputChannels;

    @Schema(description = "H·ªó tr·ª£ Bluetooth", example = "true")
    private Boolean supportBluetooth;

    @Schema(description = "H·ªó tr·ª£ WiFi", example = "true")
    private Boolean supportWifi;

    @Schema(description = "H·ªó tr·ª£ AirPlay", example = "true")
    private Boolean supportAirplay;

    // ======================
    // üé§ Micro
    // ======================
    @Schema(description = "Lo·∫°i micro", example = "Dynamic")
    private String micType;

    @Schema(description = "H∆∞·ªõng thu √¢m", example = "Cardioid")
    private String polarPattern;

    @Schema(description = "M·ª©c SPL t·ªëi ƒëa", example = "130dB")
    private String maxSPL;

    @Schema(description = "Tr·ªü kh√°ng ƒë·∫ßu ra c·ªßa micro", example = "150 Ohm")
    private String micOutputImpedance;

    @Schema(description = "ƒê·ªô nh·∫°y micro", example = "-40dB")
    private String micSensitivity;

    // ======================
    // üìÄ Turntable
    // ======================
    @Schema(description = "V·∫≠t li·ªáu m√¢m xoay", example = "Nh√¥m")
    private String platterMaterial;

    @Schema(description = "Lo·∫°i motor", example = "Belt Drive")
    private String motorType;

    @Schema(description = "Lo·∫°i c·∫ßn", example = "S-shape")
    private String tonearmType;

    @Schema(description = "T·ª± ƒë·ªông tr·∫£ c·∫ßn", example = "false")
    private Boolean autoReturn;

    // ======================
    // üéõÔ∏è DAC / Mixer / Sound Card
    // ======================
    @Schema(description = "Chip DAC", example = "ESS9038")
    private String dacChipset;

    @Schema(description = "T·∫ßn s·ªë l·∫•y m·∫´u", example = "192kHz")
    private String sampleRate;

    @Schema(description = "ƒê·ªô s√¢u bit", example = "24-bit")
    private String bitDepth;

    @Schema(description = "H·ªó tr·ª£ Balanced Output", example = "true")
    private Boolean balancedOutput;

    @Schema(description = "Giao di·ªán ƒë·∫ßu v√†o", example = "USB, Optical")
    private String inputInterface;

    @Schema(description = "Giao di·ªán ƒë·∫ßu ra", example = "RCA, XLR")
    private String outputInterface;

    @Schema(description = "S·ªë k√™nh mixer", example = "4")
    private Integer channelCount;

    @Schema(description = "C√≥ h·ªó tr·ª£ ngu·ªìn 48V cho micro", example = "true")
    private Boolean hasPhantomPower;

    @Schema(description = "S·ªë d·∫£i EQ", example = "3-band")
    private String eqBands;

    @Schema(description = "Lo·∫°i fader", example = "Linear")
    private String faderType;

    @Schema(description = "C√≥ hi·ªáu ·ª©ng t√≠ch h·ª£p s·∫µn", example = "true")
    private Boolean builtInEffects;

    @Schema(description = "C√≥ giao di·ªán USB Audio", example = "true")
    private Boolean usbAudioInterface;

    @Schema(description = "C√≥ h·ªó tr·ª£ MIDI", example = "true")
    private Boolean midiSupport;
}
