package org.example.audio_ecommerce.dto.request;

import io.swagger.v3.oas.annotations.media.Schema;
import lombok.*;
import org.example.audio_ecommerce.entity.Enum.ProductStatus;
import org.example.audio_ecommerce.entity.Product;

import java.math.BigDecimal;
import java.util.List;
import java.util.UUID;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UpdateProductRequest {

    // =========================================================
    // üîó LI√äN K·∫æT & DANH M·ª§C
    // =========================================================
    @Schema(
            description = "T√™n danh m·ª•c s·∫£n ph·∫©m (BE t·ª± √°nh x·∫° sang Category t∆∞∆°ng ·ª©ng)",
            example = "Loa",
            allowableValues = {
                    "Tai Nghe", "Loa", "Micro", "DAC", "Mixer", "Amp",
                    "Turntable", "Sound Card", "DJ Controller", "Combo"
            }
    )
    private String categoryName;

    @Schema(description = "T√™n th∆∞∆°ng hi·ªáu", example = "Sony")
    private String brandName;

    @Schema(description = "M√£ SKU (ph·∫£i duy nh·∫•t trong store)", example = "SONY-SPK-001")
    private String sku;

    // =========================================================
    // üè∑Ô∏è TH√îNG TIN C∆† B·∫¢N
    // =========================================================
    @Schema(description = "T√™n s·∫£n ph·∫©m", example = "Sony SRS-XB33 Extra Bass")
    private String name;

    @Schema(description = "M√¥ t·∫£ ng·∫Øn", example = "Loa Bluetooth ch·ªëng n∆∞·ªõc, √¢m tr·∫ßm m·∫°nh m·∫Ω")
    private String shortDescription;

    @Schema(description = "M√¥ t·∫£ chi ti·∫øt s·∫£n ph·∫©m (HTML ho·∫∑c text)")
    private String description;

    @Schema(description = "M√£ model", example = "SRS-XB33")
    private String model;

    @Schema(description = "M√†u s·∫Øc", example = "ƒêen")
    private String color;

    @Schema(description = "Ch·∫•t li·ªáu v·ªè", example = "Nh·ª±a ABS cao c·∫•p")
    private String material;

    @Schema(description = "K√≠ch th∆∞·ªõc (D√†i x R·ªông x Cao)", example = "24cm x 10cm x 12cm")
    private String dimensions;

    @Schema(description = "Tr·ªçng l∆∞·ª£ng (kg)", example = "1.2")
    private BigDecimal weight;

    @Schema(description = "Danh s√°ch URL h√¨nh ·∫£nh s·∫£n ph·∫©m")
    private List<String> images;

    @Schema(description = "Video m√¥ t·∫£ s·∫£n ph·∫©m", example = "https://youtube.com/xyz123")
    private String videoUrl;

    @Schema(description = "Danh s√°ch bi·∫øn th·ªÉ s·∫£n ph·∫©m (VD: m√†u s·∫Øc, dung l∆∞·ª£ng, size...)")
    private List<Product.ProductVariant> variants;

    // =========================================================
    // üí∞ GI√Å & KHO
    // =========================================================
    @Schema(description = "Gi√° g·ªëc c·ªßa s·∫£n ph·∫©m", example = "1500000")
    private BigDecimal price;

    @Schema(description = "Lo·∫°i ti·ªÅn t·ªá", example = "VND")
    private String currency;

    @Schema(description = "S·ªë l∆∞·ª£ng t·ªìn kho", example = "50")
    private Integer stockQuantity;

    @Schema(description = "ƒê·ªãa ch·ªâ kho h√†ng", example = "HCM - Qu·∫≠n 7")
    private String warehouseLocation;

    @Schema(description = "ƒê·ªãa ch·ªâ giao h√†ng / xu·∫•t kho")
    private String shippingAddress;

    @Schema(description = "Ph√≠ v·∫≠n chuy·ªÉn m·∫∑c ƒë·ªãnh", example = "30000")
    private BigDecimal shippingFee;

    @Schema(description = "Danh s√°ch ID ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn ƒë∆∞·ª£c h·ªó tr·ª£")
    private List<UUID> supportedShippingMethodIds;

    // =========================================================
    // üßÆ MUA NHI·ªÄU GI·∫¢M GI√Å
    // =========================================================
    @Schema(description = "Danh s√°ch m·ª©c gi·∫£m gi√° theo s·ªë l∆∞·ª£ng mua")
    private List<BulkDiscountRequest> bulkDiscounts;

    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public static class BulkDiscountRequest {
        @Schema(description = "S·ªë l∆∞·ª£ng t·ªëi thi·ªÉu", example = "5")
        private Integer fromQuantity;

        @Schema(description = "S·ªë l∆∞·ª£ng t·ªëi ƒëa", example = "10")
        private Integer toQuantity;

        @Schema(description = "Gi√° khi mua trong kho·∫£ng", example = "900000")
        private BigDecimal unitPrice;
    }

    // =========================================================
    // üìä TR·∫†NG TH√ÅI
    // =========================================================
    @Schema(description = "Tr·∫°ng th√°i s·∫£n ph·∫©m", example = "ACTIVE")
    private ProductStatus status;

    @Schema(description = "S·∫£n ph·∫©m n·ªïi b·∫≠t", example = "false")
    private Boolean isFeatured;

    // =========================================================
    // ‚öôÔ∏è K·ª∏ THU·∫¨T & B·∫¢O H√ÄNH
    // =========================================================
    private String voltageInput;
    private String warrantyPeriod;
    private String warrantyType;
    private String manufacturerName;
    private String manufacturerAddress;
    private String productCondition;
    private Boolean isCustomMade;

    // =========================================================
    // üéß TAI NGHE
    // =========================================================
    private String headphoneType;
    private String compatibleDevices;
    private Boolean isSportsModel;
    private String headphoneFeatures;
    private String batteryCapacity;
    private Boolean hasBuiltInBattery;
    private Boolean isGamingHeadset;
    private String headphoneAccessoryType;
    private String headphoneConnectionType;
    private String plugType;
    private Boolean sirimApproved;
    private Boolean sirimCertified;
    private Boolean mcmcApproved;

    // =========================================================
    // üîä LOA
    // =========================================================
    private String driverConfiguration;
    private String driverSize;
    private String frequencyResponse;
    private String sensitivity;
    private String impedance;
    private String powerHandling;
    private String enclosureType;
    private String coveragePattern;
    private String crossoverFrequency;
    private String placementType;
    private String connectionType;

    // =========================================================
    // üìª AMPLI / RECEIVER
    // =========================================================
    private String amplifierType;
    private String totalPowerOutput;
    private String thd;
    private String snr;
    private Integer inputChannels;
    private Integer outputChannels;
    private Boolean supportBluetooth;
    private Boolean supportWifi;
    private Boolean supportAirplay;

    // =========================================================
    // üé§ MICRO
    // =========================================================
    private String micType;
    private String polarPattern;
    private String maxSPL;
    private String micOutputImpedance;
    private String micSensitivity;

    // =========================================================
    // üìÄ TURNTABLE
    // =========================================================
    private String platterMaterial;
    private String motorType;
    private String tonearmType;
    private Boolean autoReturn;

    // =========================================================
    // üéõÔ∏è DAC / MIXER / SOUND CARD
    // =========================================================
    private String dacChipset;
    private String sampleRate;
    private String bitDepth;
    private Boolean balancedOutput;
    private String inputInterface;
    private String outputInterface;
    private Integer channelCount;
    private Boolean hasPhantomPower;
    private String eqBands;
    private String faderType;
    private Boolean builtInEffects;
    private Boolean usbAudioInterface;
    private Boolean midiSupport;
}
