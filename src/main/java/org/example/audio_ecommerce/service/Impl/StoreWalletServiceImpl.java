package org.example.audio_ecommerce.service.Impl;

import lombok.RequiredArgsConstructor;
import org.example.audio_ecommerce.dto.response.*;
import org.example.audio_ecommerce.entity.Enum.StoreWalletTransactionType;
import org.example.audio_ecommerce.entity.Store;
import org.example.audio_ecommerce.entity.StoreWallet;
import org.example.audio_ecommerce.entity.StoreWalletTransaction;
import org.example.audio_ecommerce.repository.StoreRepository;
import org.example.audio_ecommerce.repository.StoreWalletRepository;
import org.example.audio_ecommerce.repository.StoreWalletTransactionRepository;
import org.example.audio_ecommerce.service.StoreWalletService;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class StoreWalletServiceImpl implements StoreWalletService {

    private final StoreRepository storeRepository;
    private final StoreWalletRepository storeWalletRepository;
    private final StoreWalletTransactionRepository storeWalletTransactionRepository;

    /**
     * ‚úÖ L·∫•y th√¥ng tin v√≠ c·ªßa c·ª≠a h√†ng ƒëang ƒëƒÉng nh·∫≠p
     *    (Bao g·ªìm: ti·ªÅn kh·∫£ d·ª•ng, ti·ªÅn pending, t·ªïng doanh thu, v√† ti·ªÅn k√Ω qu·ªπ)
     */
    @Override
    public ResponseEntity<BaseResponse> getMyWallet() {
        String principal = SecurityContextHolder.getContext().getAuthentication().getName();
        String email = principal.contains(":") ? principal.split(":")[0] : principal;

        Store store = storeRepository.findByAccount_Email(email)
                .orElseThrow(() -> new RuntimeException("‚ùå Kh√¥ng t√¨m th·∫•y store cho t√†i kho·∫£n: " + email));

        StoreWallet wallet = storeWalletRepository.findByStore_StoreId(store.getStoreId())
                .orElseThrow(() -> new RuntimeException("‚ùå C·ª≠a h√†ng n√†y ch∆∞a c√≥ v√≠."));

        StoreWalletSummaryResponse response = StoreWalletSummaryResponse.builder()
                .storeId(store.getStoreId())
                .storeName(store.getStoreName())
                .walletId(wallet.getWalletId())
                .availableBalance(wallet.getAvailableBalance())
                .pendingBalance(wallet.getPendingBalance())
                .depositBalance(wallet.getDepositBalance())
                .totalRevenue(wallet.getTotalRevenue())
                .createdAt(wallet.getCreatedAt())
                .updatedAt(wallet.getUpdatedAt())
                .build();

        return ResponseEntity.ok(
                new BaseResponse<>(200, "‚úÖ L·∫•y th√¥ng tin v√≠ th√†nh c√¥ng", response)
        );
    }

    /**
     * üìú L·∫•y danh s√°ch giao d·ªãch v√≠ (ph√¢n trang + l·ªçc lo·∫°i giao d·ªãch)
     */
    @Override
    public ResponseEntity<BaseResponse> getMyWalletTransactions(int page, int size, String type) {
        String principal = SecurityContextHolder.getContext().getAuthentication().getName();
        String email = principal.contains(":") ? principal.split(":")[0] : principal;

        Store store = storeRepository.findByAccount_Email(email)
                .orElseThrow(() -> new RuntimeException("‚ùå Kh√¥ng t√¨m th·∫•y store cho t√†i kho·∫£n: " + email));

        StoreWallet wallet = storeWalletRepository.findByStore_StoreId(store.getStoreId())
                .orElseThrow(() -> new RuntimeException("‚ùå C·ª≠a h√†ng n√†y ch∆∞a c√≥ v√≠."));

        Pageable pageable = PageRequest.of(page, size, Sort.by("createdAt").descending());
        Page<StoreWalletTransaction> transactions;

        if (type != null && !type.isBlank()) {
            StoreWalletTransactionType enumType;
            try {
                enumType = StoreWalletTransactionType.valueOf(type.toUpperCase());
            } catch (IllegalArgumentException e) {
                throw new RuntimeException("‚ùå Lo·∫°i giao d·ªãch kh√¥ng h·ª£p l·ªá: " + type);
            }
            transactions = storeWalletTransactionRepository
                    .findByWallet_WalletIdAndTypeOrderByCreatedAtDesc(wallet.getWalletId(), enumType, pageable);
        } else {
            transactions = storeWalletTransactionRepository
                    .findByWallet_WalletIdOrderByCreatedAtDesc(wallet.getWalletId(), pageable);
        }

        // üîÑ Chuy·ªÉn sang DTO
        List<StoreWalletTransactionResponse> items = transactions.getContent().stream()
                .map(this::mapToTransactionResponse)
                .collect(Collectors.toList());

        PagedResult<StoreWalletTransactionResponse> result = PagedResult.<StoreWalletTransactionResponse>builder()
                .items(items)
                .page(page)
                .size(size)
                .totalElements(transactions.getTotalElements())
                .totalPages(transactions.getTotalPages())
                .build();

        return ResponseEntity.ok(new BaseResponse<>(200, "üìú L·∫•y danh s√°ch giao d·ªãch th√†nh c√¥ng", result));
    }

    /**
     * üîé L·ªçc giao d·ªãch theo th·ªùi gian, lo·∫°i, transactionId, v.v.
     */
    @Override
public Page<StoreWalletTransactionResponse> filterTransactions(
        UUID walletId,
        LocalDateTime from,
        LocalDateTime to,
        StoreWalletTransactionType type,
        UUID transactionId,
        Pageable pageable
) {
    // ‚úÖ N·∫øu kh√¥ng c√≥ walletId, t·ª± ƒë·ªông l·∫•y t·ª´ t√†i kho·∫£n ƒëang ƒëƒÉng nh·∫≠p
    if (walletId == null) {
        walletId = getCurrentStoreWalletId();
    }

    // ‚úÖ Ki·ªÉm tra ƒëi·ªÅu ki·ªán th·ªùi gian h·ª£p l·ªá
    if (from != null && to != null && from.isAfter(to)) {
        throw new IllegalArgumentException("Th·ªùi gian 'from' ph·∫£i nh·ªè h∆°n ho·∫∑c b·∫±ng 'to'");
    }

    // ‚úÖ L·∫•y d·ªØ li·ªáu t·ª´ repository
    Page<StoreWalletTransaction> transactionsPage = storeWalletTransactionRepository.filterTransactions(
            walletId, from, to, type, transactionId, pageable
    );

    // ‚úÖ √Ånh x·∫° sang DTO
    return transactionsPage.map(this::mapToTransactionResponse);
}

/**
 * üß© H√†m ti·ªán √≠ch: L·∫•y walletId c·ªßa c·ª≠a h√†ng ƒëang ƒëƒÉng nh·∫≠p
 */
private UUID getCurrentStoreWalletId() {
    String principal = SecurityContextHolder.getContext().getAuthentication().getName();
    String email = principal.contains(":") ? principal.split(":")[0] : principal;

    Store store = storeRepository.findByAccount_Email(email)
            .orElseThrow(() -> new RuntimeException("‚ùå Kh√¥ng t√¨m th·∫•y c·ª≠a h√†ng cho t√†i kho·∫£n: " + email));

    StoreWallet wallet = storeWalletRepository.findByStore_StoreId(store.getStoreId())
            .orElseThrow(() -> new RuntimeException("‚ùå C·ª≠a h√†ng n√†y ch∆∞a c√≥ v√≠."));

    return wallet.getWalletId();
}

    private StoreWalletTransactionResponse mapToTransactionResponse(StoreWalletTransaction tx) {
    return StoreWalletTransactionResponse.builder()
            .transactionId(tx.getTransactionId())
            .walletId(tx.getWallet().getWalletId())
            .orderId(tx.getOrderId())
            .amount(tx.getAmount())
            .balanceAfter(tx.getBalanceAfter())
            .description(tx.getDescription())
            .createdAt(tx.getCreatedAt())
            .type(tx.getType()) // ‚úÖ Gi·ªØ Enum
            .displayType(getDisplayName(tx.getType())) // ‚úÖ Th√™m t√™n th√¢n thi·ªán
            .build();
}

/** üß© H√†m helper hi·ªÉn th·ªã text d·ªÖ ƒë·ªçc cho FE */
private String getDisplayName(StoreWalletTransactionType type) {
    if (type == null) return "Kh√¥ng x√°c ƒë·ªãnh";
    return switch (type) {
        case DEPOSIT -> "N·∫°p ti·ªÅn v√†o v√≠";
        case PENDING_HOLD -> "Gi·ªØ ti·ªÅn ch·ªù x√°c nh·∫≠n";
        case RELEASE_PENDING -> "Gi·∫£i ph√≥ng ti·ªÅn ch·ªù";
        case WITHDRAW -> "R√∫t ti·ªÅn v·ªÅ ng√¢n h√†ng";
        case REFUND -> "Ho√†n ti·ªÅn cho kh√°ch h√†ng";
        case ADJUSTMENT -> "ƒêi·ªÅu ch·ªânh th·ªß c√¥ng";
    };
}

@Override
public UUID resolveWalletIdForCurrentUser() {
    String principal = SecurityContextHolder.getContext().getAuthentication().getName();
    String email = principal.contains(":") ? principal.split(":")[0] : principal;

    Store store = storeRepository.findByAccount_Email(email)
            .orElseThrow(() -> new RuntimeException("‚ùå Kh√¥ng t√¨m th·∫•y c·ª≠a h√†ng cho t√†i kho·∫£n: " + email));

    StoreWallet wallet = storeWalletRepository.findByStore_StoreId(store.getStoreId())
            .orElseThrow(() -> new RuntimeException("‚ùå C·ª≠a h√†ng n√†y ch∆∞a c√≥ v√≠."));

    return wallet.getWalletId();
}
}
