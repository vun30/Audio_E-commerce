package org.example.audio_ecommerce.repository;

import org.example.audio_ecommerce.dto.request.UpdateStoreRequest;
import org.example.audio_ecommerce.dto.response.BaseResponse;
import org.example.audio_ecommerce.entity.Store;
import org.example.audio_ecommerce.entity.Enum.StoreStatus;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Repository
public interface StoreRepository extends JpaRepository<Store, UUID> {

    // ‚úÖ S·ª≠a l·∫°i: d√πng field "id" c·ªßa Account k·∫ø th·ª´a t·ª´ BaseEntity
    Optional<Store> findByAccount_Id(UUID accountId);

    boolean existsByAccount_Id(UUID accountId);

    // üîç T√¨m store theo email t√†i kho·∫£n (hay d√πng cho login dashboard store)
    Optional<Store> findByAccount_Email(String email);

    // üîç L·∫•y danh s√°ch t·∫•t c·∫£ store theo tr·∫°ng th√°i (INACTIVE, PENDING, ACTIVE, ...)
    List<Store> findAllByStatus(StoreStatus status);

    // üîç Ki·ªÉm tra xem store ƒë√£ t·ªìn t·∫°i theo t√™n (ƒë·ªÉ tr√°nh t·∫°o tr√πng t√™n)
    boolean existsByStoreName(String storeName);

    // üîç L·∫•y store theo ID nh∆∞ng load lu√¥n account (n·∫øu c·∫ßn)
    Optional<Store> findByStoreId(UUID storeId);

     Page<Store> findByStoreNameContainingIgnoreCase(String keyword, Pageable pageable);

    // ‚úÖ (Tu·ª≥ ch·ªçn) t√¨m theo ID v√† tr·∫°ng th√°i ‚Äî d√πng n·∫øu mu·ªën check nhanh
    Optional<Store> findByStoreIdAndStatus(UUID storeId, StoreStatus status);


}
